{
  "version": 3,
  "file": "pageDormanticide.js",
  "sources": [
    "games/common/js/GameEngine.js",
    "games/common/js/GameSave.js",
    "games/common/js/GameInput.js",
    "games/common/js/GameUtils.js",
    "games/common/js/graphics/GameGraphics.js",
    "games/common/js/view/GameView.js",
    "games/common/js/view/TitleView.js",
    "games/common/js/view/GameSaveView.js",
    "games/dormanticide/js/view/OverworldView.js",
    "games/dormanticide/js/view/BattleView.js",
    "games/dormanticide/js/dormant/Dormant.js",
    "games/dormanticide/js/dormant/FightAction.js",
    "games/dormanticide/js/main.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uB;AC9FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACxhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K",
  "sourcesContent": [
    "/// <reference path=\"commonLinker.js\" />\r\n\r\n/*\r\n    Declares two globals: canvas and ctx\r\n*/\r\nfunction GameEngine() {\r\n    // back button\r\n    var backBtn = document.createElement(\"a\");\r\n    backBtn.href = \"/#games\";\r\n    backBtn.innerText = \"Back\";\r\n    backBtn.className = \"btnBack\";\r\n    document.body.appendChild(backBtn);\r\n\r\n    // canvasWrap\r\n    var wrap = document.createElement(\"div\");\r\n    wrap.className = \"canvasWrap\";\r\n\r\n    // canvas\r\n    canvas = document.createElement(\"canvas\");\r\n    canvas.setAttribute(\"width\", 16*63);\r\n    canvas.setAttribute(\"height\", 9*63);\r\n    wrap.appendChild(canvas);\r\n    document.body.appendChild(wrap);\r\n\r\n    ctx = canvas.getContext(\"2d\");\r\n\r\n    this.input = new GameInput(this);\r\n    this.graphics = new GameGraphics(this);\r\n    this.utils = new GameUtils(this);\r\n    this.view = new GameView(this);\r\n\r\n    this.init();\r\n}\r\n\r\nGameEngine.prototype = (function() {\r\n    var that,\r\n        updateInterval,\r\n        renderRAF,\r\n        onUpdateSet = false,\r\n        onRenderSet = false\r\n    ;\r\n\r\n\r\n    function update() {\r\n        that.view.update();\r\n\r\n        if(onUpdateSet)\r\n            that.onUpdate();\r\n    }\r\n\r\n    function render() {\r\n        renderRAF = requestAnimationFrame(render);\r\n        that.view.render();\r\n\r\n        if(onRenderSet)\r\n            that.onRender();\r\n    }\r\n\r\n\r\n    return {\r\n        init: function(){\r\n            that = this;\r\n        },\r\n\r\n        onUpdate: function(callback) {\r\n            onUpdateSet = true;\r\n            this.onUpdate = callback;\r\n        },\r\n\r\n        onRender: function(callback) {\r\n            onRenderSet = true;\r\n            this.onRender = callback;\r\n        },\r\n\r\n        start: function() {\r\n            updateInterval = setInterval(update, 1000 / 60);\r\n            renderRAF = requestAnimationFrame(render);\r\n        },\r\n\r\n        stop: function() {\r\n            clearInterval(updateInterval);\r\n            cancelAnimationFrame(renderRAF);\r\n        }\r\n    };\r\n})();\r\n",
    "/// <reference path=\"commonLinker.js\" />\r\n\r\nfunction GameSave() {\r\n\r\n}\r\n\r\nGameSave.prototype = (function () {\r\n    return {\r\n        load: function (slot) {\r\n            return localStorage[\"slot\" + slot];\r\n        },\r\n\r\n        getList: function () {\r\n            var zero = this.load(0),\r\n                one = this.load(1),\r\n                two = this.load(2),\r\n                def = \"---\"\r\n            ;\r\n            return list = [\r\n                (typeof(zero) !== \"undefined\") ? zero : def,\r\n                (typeof (one) !== \"undefined\") ? one : def,\r\n                (typeof (two) !== \"undefined\") ? two : def\r\n            ];\r\n        },\r\n\r\n        save: function (slot, data) {\r\n            localStorage[\"slot\" + slot] = data;\r\n        },\r\n\r\n        erase: function(slot){\r\n            localStorage.removeItem(\"slot\" + slot);\r\n            return this.getList();\r\n        }\r\n    };\r\n})();\r\n",
    "/*\r\n    The input component of GameEngine.\r\n*/\r\nfunction GameInput() {\r\n    this.keysDown = {};\r\n    this.lastKeyUp = KeyCode.EMPTY;\r\n    this.lastKeyDown = KeyCode.EMPTY;\r\n\r\n    function fixKey(key) {\r\n        if (key === KeyCode.W)\r\n            key = KeyCode.UP;\r\n        else if (key === KeyCode.S)\r\n            key = KeyCode.DOWN;\r\n        else if (key === KeyCode.D)\r\n            key = KeyCode.RIGHT;\r\n        else if (key === KeyCode.A)\r\n            key = KeyCode.LEFT;\r\n\r\n        return key;\r\n    }\r\n\r\n    var that = this;\r\n\r\n    addEventListener(\"keydown\", function (e) {\r\n        var key = fixKey(e.keyCode);\r\n\r\n        if (!that.keysDown[key]) {\r\n            that.lastKeyDown = key;\r\n            that.keysDown[key] = true;\r\n        }\r\n    });\r\n\r\n    addEventListener(\"keyup\", function (e) {\r\n        that.lastKeyUp = fixKey(e.keyCode);\r\n        delete that.keysDown[that.lastKeyUp];\r\n    });\r\n}\r\n\r\nGameInput.prototype = (function () {\r\n\r\n    return {\r\n        update: function () {\r\n\r\n        }\r\n    };\r\n})();\r\n\r\n\r\n// global enums\r\nvar KeyCode = Object.freeze({\r\n    EMPTY: -1,\r\n    ENTER: 13,\r\n    CTRL: 17,\r\n    ESC: 27,\r\n    SPACEBAR: 32,\r\n    LEFT: 37,\r\n    UP: 38,\r\n    RIGHT: 39,\r\n    DOWN: 40,\r\n    DELETE: 46,\r\n    A: 65,\r\n    D: 68,\r\n    F: 70,\r\n    H: 72,\r\n    J: 74,\r\n    K: 75,\r\n    M: 77,\r\n    O: 79,\r\n    R: 82,\r\n    S: 83,\r\n    W: 87\r\n});\r\n\r\nvar KeyCodeNames = {};\r\nKeyCodeNames[-1] = \"EMPTY\";\r\nKeyCodeNames[13] = \"ENTER\";\r\nKeyCodeNames[17] = \"CTRL\";\r\nKeyCodeNames[27] = \"ESC\";\r\nKeyCodeNames[32] = \"SPACEBAR\";\r\nKeyCodeNames[37] = \"LEFT\";\r\nKeyCodeNames[38] = \"UP\";\r\nKeyCodeNames[39] = \"RIGHT\";\r\nKeyCodeNames[40] = \"DOWN\";\r\nKeyCodeNames[46] = \"DELETE\";\r\nKeyCodeNames[65] = \"A\";\r\nKeyCodeNames[68] = \"D\";\r\nKeyCodeNames[70] = \"F\";\r\nKeyCodeNames[72] = \"H\";\r\nKeyCodeNames[74] = \"J\";\r\nKeyCodeNames[75] = \"K\";\r\nKeyCodeNames[77] = \"M\";\r\nKeyCodeNames[79] = \"O\";\r\nKeyCodeNames[82] = \"R\";\r\nKeyCodeNames[83] = \"S\";\r\nKeyCodeNames[87] = \"W\";",
    "/*\r\n    The utils component of GameEngine.\r\n*/\r\nfunction GameUtils(gEngine) {\r\n    return {\r\n        /*\r\n            Resets the newView's private variables.\r\n            Changes the view.\r\n        */\r\n        switchView: function(newView) {\r\n            newView.init();\r\n            gEngine.view = newView;\r\n        }\r\n    };\r\n}\r\n\r\n// global enums\r\nvar Dir = Object.freeze({\r\n    RIGHT: 0,\r\n    LEFT: 1\r\n});",
    "/*\r\n    The graphics component of GameEngine.\r\n*/\r\nvar GameGraphics = function(gEngine) {\r\n    return {\r\n        isAnimating: false,\r\n\r\n        /*\r\n            @param(number) timeStep The wait time between running the action (in ms).\r\n            @param(number) numTimes The number to times to run the action.\r\n            @param(function) callback The callback function.\r\n        */\r\n        repeatAction: function(timeStep, numTimes, callback) {\r\n            this.isAnimating = true;\r\n\r\n            var num = 0,\r\n                that = this\r\n            ;\r\n\r\n            var theAnimation = setInterval(function() {\r\n                if(num++ > numTimes) {\r\n                    clearInterval(theAnimation);\r\n                    that.isAnimating = false;\r\n                }\r\n                else {\r\n                    callback();\r\n                }\r\n            }, timeStep);\r\n        }\r\n    };\r\n};\r\n",
    "/// <reference path=\"../commonLinker.js\" />\r\n\r\n/*\r\n    A generic view interface.\r\n*/\r\nfunction GameView(gEngine) {\r\n    this.privates = {\r\n        bgColor: \"#ccc\"\r\n    };\r\n\r\n    this.init();\r\n}\r\n\r\nGameView.prototype = (function () {\r\n\r\n    return {\r\n        then: function(callback){\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function(){\r\n\r\n        },\r\n\r\n        update: function () {\r\n\r\n        },\r\n\r\n        render: function () {\r\n            ctx.fillStyle = this.privates.bgColor;\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        }\r\n    };\r\n})();\r\n",
    "/// <reference path=\"../commonLinker.js\" />\r\n\r\n/*\r\n    Implements GameView.\r\n\r\n    @param(string) title The name of the game.\r\n*/\r\nfunction TitleView(title) {\r\n    this.privates = {\r\n        title: title\r\n    };\r\n\r\n    this.init();\r\n}\r\n\r\nTitleView.prototype = (function () {\r\n    var title,\r\n        cta = \"Press Enter\"\r\n    ;\r\n\r\n    return {\r\n        then: function(callback){\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function(){\r\n            title = this.privates.title;\r\n        },\r\n\r\n        update: function () {\r\n            if (game.input.lastKeyDown === KeyCode.ENTER) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n                this.privates.callback();\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            ctx.fillStyle = \"#000\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            ctx.font = \"36px Arial\"\r\n            ctx.fillStyle = \"#fff\";\r\n            ctx.fillText(title, canvas.width / 2 - ctx.measureText(title).width / 2, 100);\r\n\r\n            ctx.font = \"24px Arial\";\r\n            ctx.fillText(cta, canvas.width / 2 - ctx.measureText(cta).width / 2, canvas.height / 2);\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"../commonLinker.js\" />\r\n\r\nfunction GameSaveView() {\r\n    this.privates = {};\r\n\r\n    this.init();\r\n}\r\n\r\nGameSaveView.prototype = (function() {\r\n    var that,\r\n        title = \"Select a save slot\",\r\n        cta = \"Press Delete to erase a save\",\r\n        storage = new GameSave(),\r\n        list = storage.getList(),\r\n        arrow\r\n    ;\r\n\r\n    return {\r\n        then: function(callback) {\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function() {\r\n            that = this;\r\n\r\n            arrow = {\r\n                img: \">>\",\r\n                slot: 0,\r\n                x: canvas.width / 2 - ctx.measureText(list[0]).width / 2 - 60,    // TODO: make instance var??\r\n                y: 200\r\n            };\r\n        },\r\n\r\n        update: function() {\r\n            if(game.input.lastKeyDown === KeyCode.ESC) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n                this.privates.callback(KeyCode.ESC);\r\n            }\r\n            else if(game.input.lastKeyDown === KeyCode.ENTER) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                var date = new Date();\r\n                var m = date.getMonth();\r\n                var d = date.getDay();\r\n                var y = date.getYear();\r\n                var t = date.toLocaleTimeString();\r\n\r\n                storage.save(arrow.slot, m + '/' + d + '/' + y + ' ' + t);\r\n                this.privates.callback(KeyCode.ENTER);\r\n            }\r\n            else if(game.input.lastKeyDown === KeyCode.DELETE) {\r\n                game.input.lastKeyDownp = KeyCode.EMPTY;\r\n\r\n                list = storage.erase(arrow.slot);\r\n            }\r\n            else if(arrow.slot !== 2 && game.input.lastKeyDown === KeyCode.DOWN) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                ++arrow.slot;\r\n                arrow.x = canvas.width / 2 - ctx.measureText(list[arrow.slot]).width / 2 - 60;\r\n                arrow.y += 80;\r\n            }\r\n            else if(arrow.slot !== 0 && game.input.lastKeyDown === KeyCode.UP) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                --arrow.slot;\r\n                arrow.x = canvas.width / 2 - ctx.measureText(list[arrow.slot]).width / 2 - 60;\r\n                arrow.y -= 80;\r\n            }\r\n        },\r\n\r\n        render: function() {\r\n            ctx.fillStyle = \"#111\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            ctx.font = \"36px Arial\"\r\n            ctx.fillStyle = \"#fff\";\r\n            ctx.fillText(title, canvas.width / 2 - ctx.measureText(title).width / 2, 80);\r\n\r\n            ctx.font = \"24px Arial\"\r\n\r\n            for(var i = 0; i < list.length; ++i) {\r\n                ctx.fillText(list[i], canvas.width / 2 - ctx.measureText(list[i]).width / 2, 200 + i * 80);\r\n            }\r\n\r\n            ctx.fillText(arrow.img, arrow.x, arrow.y);\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"../linker.js\" />\r\n\r\nfunction OverworldView() {\r\n    this.privates = {};\r\n    this.init();\r\n}\r\n\r\nOverworldView.prototype = (function () {\r\n\r\n    var arrow = {\r\n        img: \"^^\"\r\n    };\r\n\r\n    return {\r\n        then: function(callback){\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function() {\r\n            arrow.x = 90;\r\n            arrow.y = canvas.height / 2 + 70;\r\n            arrow.slot = 0;\r\n        },\r\n\r\n        update: function () {\r\n            if (game.input.lastKeyDown === KeyCode.ENTER) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n                this.privates.callback();\r\n            }\r\n            else if (game.input.lastKeyDown === KeyCode.RIGHT) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n                \r\n                if (arrow.slot < 7) {\r\n                    arrow.x += 115;\r\n                    ++arrow.slot;\r\n                }\r\n            }\r\n            else if (game.input.lastKeyDown === KeyCode.LEFT) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                if (arrow.slot > 0) {\r\n                    arrow.x -= 115;\r\n                    --arrow.slot;\r\n                }\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            // background\r\n            ctx.fillStyle = \"#34282c\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            // levels\r\n            var size = 80, x, y;\r\n\r\n            for (var i = 0; i < 8; ++i) {\r\n                x = 60 + i * 115;\r\n                y = canvas.height / 2 - size / 2;\r\n\r\n                ctx.fillStyle = \"#fff\";\r\n                ctx.font = \"18px Arial\";\r\n                ctx.fillText(\"Level \" + (i+1), x + 10, y - 13);\r\n\r\n                ctx.fillStyle = \"red\";\r\n                ctx.fillRect(x, y, size, size);\r\n            }\r\n\r\n            // arrow\r\n            ctx.fillStyle = \"#fff\";\r\n            ctx.fillText(arrow.img, arrow.x, arrow.y);\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"../linker.js\" />\r\n\r\n/*\r\n    Implements GameView.\r\n\r\n    @param(string) bgColor The view background color.\r\n    @param(Dormant) dormantL The player's dormant.\r\n    @param(Dormant) dormantR The opponent's dormant.\r\n*/\r\nfunction BattleView(bgColor, dormantL, dormantR) {\r\n    this.privates = {\r\n        bgColor: bgColor,\r\n        dormantL: dormantL,\r\n        dormantR: dormantR\r\n    };\r\n\r\n    this.init();\r\n}\r\n\r\nBattleView.prototype = (function () {\r\n\r\n    var that,\r\n        arrow = {\r\n            img: \">>\"\r\n        },\r\n        left,\r\n        wasAttack,\r\n        wasAttackTimer,\r\n        fire,\r\n        theAttack,\r\n        dormantL,\r\n        dormantR\r\n    ;\r\n\r\n    function checkInput(dormantL, dormantR) {\r\n        switch(game.input.lastKeyDown) {\r\n            case KeyCode.ENTER:\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                theAttack.name = dormantL.actions[arrow.curSlot].name;\r\n                theAttack.atk = (dormantL.atk * dormantL.actions[arrow.curSlot].multiplier) / dormantR.def;\r\n\r\n                return true;\r\n                break;\r\n            case KeyCode.UP:\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                if(arrow.curSlot !== 0 && dormantL.actions[arrow.curSlot - 1] !== null) {\r\n                    --arrow.curSlot;\r\n                    arrow.y -= 30;\r\n                }\r\n                break;\r\n            case KeyCode.DOWN:\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                if(arrow.curSlot !== 3 && dormantL.actions[arrow.curSlot + 1] !== null) {\r\n                    ++arrow.curSlot;\r\n                    arrow.y += 30;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    function runTackleAnimation() {\r\n        left.dir = Dir.RIGHT;\r\n\r\n        game.graphics.repeatAction(6, 60, function() {\r\n            if(left.dir === Dir.RIGHT && left.x > 60) {\r\n                left.dir = Dir.LEFT;\r\n            }\r\n\r\n            if(left.dir === Dir.RIGHT)\r\n                ++left.x;\r\n            else\r\n                --left.x;\r\n\r\n            dormantR.hp -= theAttack.atk / 60;\r\n        });\r\n    }\r\n\r\n    /****** Render *****/\r\n    function drawDormantHUD(dormant, x, y, drawXP) {\r\n        // name\r\n        var str = dormant.name + \"  L\" + dormant.lvl;\r\n\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillText(str, x + ctx.measureText(str).width / 2, y);\r\n\r\n        // hp\r\n        ctx.fillText(\"HP\", x, y + 20);\r\n        ctx.strokeStyle = \"#000\";\r\n        ctx.strokeRect(x + 21, y + 12, 100, 10);\r\n\r\n        ctx.fillStyle = \"red\";\r\n        ctx.fillRect(x + 22, y + 13, dormant.hp * (100 / dormant.initHP) - 1, 8);\r\n\r\n        // xp\r\n        if(drawXP) {\r\n            ctx.fillStyle = \"#000\";\r\n            ctx.fillText(\"XP\", x, y + 40);\r\n            ctx.strokeStyle = \"#000\";\r\n            ctx.strokeRect(x + 21, y + 32, 100, 10);\r\n\r\n            ctx.fillStyle = \"#777\";\r\n            ctx.fillRect(x + 22, y + 33, dormant.xp * (100 / dormant.xpNeeded) - 1, 8);\r\n        }\r\n    }\r\n\r\n    function drawHUD() {\r\n        ctx.strokeStyle = \"#000\";\r\n        ctx.strokeRect(20, 300, 500, 250);\r\n\r\n        ctx.font = \"12px Arial\";\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillText(\"ATK: \" + dormantL.atk, 460, 320);\r\n        ctx.fillText(\"DEF: \" + dormantL.def, 460, 340);\r\n\r\n        drawActionList();\r\n        drawActionArrow();\r\n    }\r\n\r\n    function drawActionList() {\r\n        ctx.fillStyle = \"#000\";\r\n\r\n        for (var i = 0; i < 4; ++i) {\r\n            if (dormantL.actions[i] === null) {\r\n                ctx.fillText(\"--\", 80, 350 + i * 30);\r\n            }\r\n            else {\r\n                ctx.fillText(dormantL.actions[i].name, 80, 350 + i * 30);\r\n            }\r\n        }\r\n    }\r\n\r\n    function drawActionArrow() {\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillText(arrow.img, arrow.x, arrow.y);\r\n    }\r\n\r\n\r\n    return {\r\n        then: function(callback) {\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function() {\r\n            that = this;\r\n            arrow.x = 43;\r\n            arrow.y = 350;\r\n            arrow.curSlot = 0;\r\n\r\n            left = {\r\n                x: 30,\r\n                dir: Dir.RIGHT\r\n            };\r\n\r\n            fire = {\r\n                x: 0,\r\n                y: 0\r\n            };\r\n\r\n            wasAttack = false;\r\n            wasAttackTimer = 60;\r\n            theAttack = {\r\n                name: \"EMPTY\",\r\n                atk: 0\r\n            };\r\n\r\n            dormantL = this.privates.dormantL;\r\n            dormantR = this.privates.dormantR;\r\n        },\r\n\r\n        update: function() {\r\n            if(wasAttack) {\r\n                dormantR.hp -= theAttack.atk / 60;\r\n            }\r\n            if(!game.graphics.isAnimating) {\r\n                var _wasAttack = checkInput(dormantL, dormantR);\r\n                if(_wasAttack) {\r\n                    if(theAttack.name === FightAction.TACKLE.name) {\r\n                        runTackleAnimation();\r\n                    }\r\n                    else if(theAttack.name === FightAction.DRAGONS_BREATH.name) {\r\n                        wasAttack = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(dormantR.hp <= 0) {\r\n                dormantL.xp += 25;\r\n                this.privates.callback();\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            // background\r\n            ctx.fillStyle = this.privates.bgColor;\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            // left\r\n            drawDormantHUD(dormantL, 10, 15, true);\r\n            dormantL.draw(left.x, 90);\r\n            drawHUD();\r\n\r\n            // right\r\n            drawDormantHUD(dormantR, canvas.width - 130, 15, false);\r\n            dormantR.draw(770, 90);\r\n\r\n\r\n            // attack animation\r\n            if(wasAttack) {\r\n\r\n                var t = (wasAttackTimer % 40);\r\n                if(t >= 0 && t < 10) {\r\n                    fire.x = 0;\r\n                }\r\n                else if(t >= 10 && t < 20) {\r\n                    fire.x = 5;\r\n                }\r\n                else if(t >= 20 && t < 30) {\r\n                    fire.x = 0;\r\n                }\r\n                else if(t >= 30 && t < 40) {\r\n                    fire.x = -5;\r\n                }\r\n\r\n                ctx.fillStyle = \"red\";\r\n                ctx.fillRect(870 + fire.x, 242, 40, 12);\r\n                ctx.fillRect(880 + fire.x, 230, 30, 12);\r\n                ctx.fillRect(880 + fire.x, 218, 20, 12);\r\n\r\n\r\n                if(wasAttackTimer-- === 0) {\r\n                    wasAttack = false;\r\n                    wasAttackTimer = 60;\r\n                }\r\n            }\r\n\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"../linker.js\" />\r\n\r\n/*\r\n    @param(string) name The name of the dormant.\r\n    @param(number) atk The attack strength of the dormant.\r\n    @param(number) def The defense strength of the dormant.\r\n    @param(number) hp The total available health points of the dormant.\r\n    @param(array) actions The fight actions of the dormant.\r\n    @param(?number) lvl The level of the dormant. (1 by default)\r\n*/\r\nfunction Dormant(src, name, atk, def, hp, actions, lvl) {\r\n    var that = this;\r\n\r\n    this.img = new Image();\r\n    this.imgReady = false;\r\n    this.img.onload = function () {\r\n        that.imgReady = true;\r\n    };\r\n    this.img.src = \"img/\" + src;\r\n\r\n    this.name = name;\r\n    this.atk = atk;\r\n    this.def = def;\r\n    this.initHP = this.hp = hp;\r\n    this.actions = actions;\r\n    this.lvl = (typeof (lvl) !== \"undefined\") ? lvl : 1;\r\n    this.xp = 0;\r\n    this.xpNeeded = 50;\r\n}\r\n\r\nDormant.prototype = (function () {\r\n\r\n    return {\r\n        draw: function (x, y) {\r\n            if (this.imgReady) {\r\n                ctx.drawImage(this.img, x, y, this.img.width, this.img.height);\r\n            }\r\n        }\r\n    };\r\n})();\r\n",
    "var FightAction = Object.freeze({\r\n    TACKLE: {\r\n        name: \"TACKLE\",\r\n        multiplier: 1\r\n    },\r\n    HEAL: {\r\n        name: \"HEAL\",\r\n        multiplier: 1\r\n    },\r\n    DRAGONS_BREATH: {\r\n        name: \"DRAGONS BREATH\",\r\n        multiplier: 5\r\n    }\r\n});",
    "/// <reference path=\"linker.js\" />\r\n\r\n/*\r\n    The main class for dormanticide.\r\n    Declares game as a global.\r\n*/\r\n(function Main() {\r\n\r\n    game = new GameEngine();\r\n    game.start();\r\n\r\n    var curLvl = 1;\r\n\r\n    var titleView = new TitleView(\"Dormanticide\");\r\n    titleView.then(function () {\r\n        game.utils.switchView(overworldView);\r\n    });\r\n\r\n    var overworldView = new OverworldView();\r\n    overworldView.then(function () {\r\n        if (curLvl === 1)\r\n            game.utils.switchView(lvl1);\r\n        else\r\n            game.utils.switchView(lvl2);\r\n    });\r\n\r\n\r\n    var actions = [FightAction.TACKLE, FightAction.DRAGONS_BREATH, null, null];\r\n\r\n    var malaise = new Dormant(\"malaise.png\", \"MALAISE\", 12, 8, 27, actions);\r\n    var erabor = new Dormant(\"erabor.png\", \"ERABOR\", 8, 12, 23, actions);\r\n    var tildamesh = new Dormant(\"tildamesh.png\", \"TILDAMESH\", 8, 12, 23, actions);\r\n\r\n\r\n    var lvl1 = new BattleView(\"#ddd\", malaise, erabor);\r\n    lvl1.then(function () {\r\n        ++curLvl;\r\n        game.utils.switchView(overworldView);\r\n    });\r\n\r\n    var lvl2 = new BattleView(\"#ddd\", malaise, tildamesh);\r\n    lvl2.then(function () {\r\n        game.utils.switchView(overworldView);\r\n    });\r\n\r\n\r\n    game.view = titleView;\r\n})();"
  ]
}