{
  "version": 3,
  "file": "pageDormanticide.js",
  "sources": [
    "games/common/js/GameEngine.js",
    "games/common/js/GameSave.js",
    "games/common/js/GameInput.js",
    "games/common/js/GameGraphics.js",
    "games/common/js/GameView.js",
    "games/dormanticide/js/graphics/Graphics.js",
    "games/dormanticide/js/view/BattleView.js",
    "games/dormanticide/js/dormant/Dormant.js",
    "games/dormanticide/js/dormant/FightAction.js",
    "games/dormanticide/js/main.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;ACrhHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,I;ACzEA;AACA;AACA;AACA;AACA;A;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;ACnxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+C",
  "sourcesContent": [
    "function GameEngine() {\r\n    // back button\r\n    var backBtn = document.createElement(\"a\");\r\n    backBtn.href = \"/#games\";\r\n    backBtn.innerText = \"Back\";\r\n    backBtn.className = \"btnBack\";\r\n    document.body.appendChild(backBtn);\r\n\r\n    // canvasWrap\r\n    var wrap = document.createElement(\"div\");\r\n    wrap.className = \"canvasWrap\";\r\n    canvas = document.createElement(\"canvas\");\r\n    canvas.setAttribute(\"width\", 16*63);\r\n    canvas.setAttribute(\"height\", 9*63);\r\n    wrap.appendChild(canvas);\r\n    document.body.appendChild(wrap);\r\n\r\n    ctx = canvas.getContext(\"2d\");\r\n\r\n    input = new GameInput();\r\n    view = new GameView();\r\n\r\n    function update() {\r\n        view.update();\r\n    }\r\n\r\n    function render() {\r\n        requestAnimationFrame(render);\r\n        view.render();\r\n    }\r\n\r\n    return {\r\n        start: function () {\r\n            setInterval(update, 1000 / 60);\r\n            requestAnimationFrame(render);\r\n        }\r\n    };\r\n}",
    "/// <reference path=\"../../vamp/js/linker.js\" />\r\n\r\nfunction GameSave() {\r\n\r\n}\r\n\r\nGameSave.prototype = (function () {\r\n    return {\r\n        load: function (slot) {\r\n            return localStorage[\"slot\" + slot];\r\n        },\r\n\r\n        getList: function () {\r\n            var zero = this.load(0),\r\n                one = this.load(1),\r\n                two = this.load(2),\r\n                def = \"---\"\r\n            ;\r\n            return list = [\r\n                (typeof(zero) !== \"undefined\") ? zero : def,\r\n                (typeof (one) !== \"undefined\") ? one : def,\r\n                (typeof (two) !== \"undefined\") ? two : def\r\n            ];\r\n        },\r\n\r\n        save: function (slot, data) {\r\n            localStorage[\"slot\" + slot] = data;\r\n        },\r\n\r\n        erase: function(slot){\r\n            localStorage.removeItem(\"slot\" + slot);\r\n            return this.getList();\r\n        }\r\n    };\r\n})();\r\n\r\nfunction GameSaveView(returnView, callback) {\r\n    this.returnView = returnView;\r\n    this.callback = callback;\r\n    this.init();\r\n}\r\n\r\nGameSaveView.prototype = (function () {\r\n    var title = \"Select a save slot\";\r\n    var cta = \"Press Delete to erase a save\";\r\n\r\n    var storage = new GameSave();\r\n    var list = storage.getList();\r\n    var arrow;\r\n\r\n    return {\r\n        init: function(){\r\n            arrow = {\r\n                img: \">>\",\r\n                slot: 0,\r\n                x: canvas.width / 2 - ctx.measureText(list[0]).width/2 - 60,\r\n                y: 200\r\n            };\r\n        },\r\n\r\n        update: function () {\r\n            \r\n            if (lastKeyUp === KeyCode.ENTER) {\r\n                lastKeyUp = KeyCode.EMPTY;\r\n\r\n                var date = new Date();\r\n                var m = date.getMonth();\r\n                var d = date.getDay();\r\n                var y = date.getYear();\r\n                var t = date.toLocaleTimeString();\r\n\r\n                storage.save(arrow.slot, m + '/' + d + '/' + y + ' ' + t);\r\n                this.callback();\r\n            }\r\n            else if (lastKeyUp === KeyCode.DELETE) {\r\n                lastKeyUp = KeyCode.EMPTY;\r\n\r\n                list = storage.erase(arrow.slot);\r\n            }\r\n            else if (arrow.slot !== 2 && lastKeyUp === KeyCode.DOWN) {\r\n                lastKeyUp = KeyCode.EMPTY;\r\n\r\n                ++arrow.slot;\r\n                arrow.x = canvas.width / 2 - ctx.measureText(list[arrow.slot]).width / 2 - 60;\r\n                arrow.y += 80;\r\n            }\r\n            else if (arrow.slot !== 0 && lastKeyUp === KeyCode.UP) {\r\n                lastKeyUp = KeyCode.EMPTY;\r\n\r\n                --arrow.slot;\r\n                arrow.x = canvas.width / 2 - ctx.measureText(list[arrow.slot]).width / 2 - 60;\r\n                arrow.y -= 80;\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            ctx.fillStyle = \"#111\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            ctx.font = \"36px Arial\"\r\n            ctx.fillStyle = \"#fff\";\r\n            ctx.fillText(title, canvas.width / 2 - ctx.measureText(title).width / 2, 80);\r\n\r\n            ctx.font = \"24px Arial\"\r\n\r\n            for (var i = 0; i < list.length; ++i) {\r\n                ctx.fillText(list[i], canvas.width / 2 - ctx.measureText(list[i]).width/2, 200 + i * 80);\r\n            }\r\n\r\n            ctx.fillText(arrow.img, arrow.x, arrow.y);\r\n        }\r\n    };\r\n})();",
    "var KeyCode = Object.freeze({\r\n    EMPTY: -1,\r\n    ENTER: 13,\r\n    CTRL: 17,\r\n    ESC: 27,\r\n    SPACEBAR: 32,\r\n    UP: 38,\r\n    DOWN: 40,\r\n    DELETE: 46,\r\n    A: 65,\r\n    D: 68,\r\n    F: 70,\r\n    H: 72,\r\n    J: 74,\r\n    K: 75,\r\n    M: 77,\r\n    O: 79,\r\n    R: 82,\r\n    S: 83,\r\n    W: 87\r\n});\r\n\r\nvar KeyCodeNames = {};\r\nKeyCodeNames[-1] = \"EMPTY\";\r\nKeyCodeNames[13] = \"ENTER\";\r\nKeyCodeNames[17] = \"CTRL\";\r\nKeyCodeNames[27] = \"ESC\";\r\nKeyCodeNames[32] = \"SPACEBAR\";\r\nKeyCodeNames[38] = \"UP\";\r\nKeyCodeNames[40] = \"DOWN\";\r\nKeyCodeNames[46] = \"DELETE\";\r\nKeyCodeNames[65] = \"A\";\r\nKeyCodeNames[68] = \"D\";\r\nKeyCodeNames[70] = \"F\";\r\nKeyCodeNames[72] = \"H\";\r\nKeyCodeNames[74] = \"J\";\r\nKeyCodeNames[75] = \"K\";\r\nKeyCodeNames[77] = \"M\";\r\nKeyCodeNames[79] = \"O\";\r\nKeyCodeNames[82] = \"R\";\r\nKeyCodeNames[83] = \"S\";\r\nKeyCodeNames[87] = \"W\";\r\n\r\nfunction GameInput() {\r\n    keysDown = {};\r\n    lastKeyUp = KeyCode.EMPTY;\r\n\r\n    function fixKey(key) {\r\n        if (key === KeyCode.W)\r\n            key = KeyCode.UP;\r\n        else if (key === KeyCode.S)\r\n            key = KeyCode.DOWN;\r\n\r\n        return key;\r\n    }\r\n\r\n    addEventListener(\"keydown\", function (e) {\r\n        keysDown[fixKey(e.keyCode)] = true;\r\n    }, true);\r\n\r\n    addEventListener(\"keyup\", function (e) {\r\n        lastKeyUp = fixKey(e.keyCode);\r\n        delete keysDown[lastKeyUp];\r\n    }, false);\r\n}\r\n\r\n//Input.prototype = function () {\r\n\r\n//    return {\r\n//        update: function () {\r\n\r\n//        }\r\n//    };\r\n//};",
    "function GameGraphics() {\r\n    return {\r\n\r\n    };\r\n}\r\n",
    "/// <reference path=\"commonLinker.js\" />\r\n\r\nfunction GameView() {\r\n\r\n}\r\n\r\nGameView.prototype = (function () {\r\n\r\n    return {\r\n        update: function () {\r\n\r\n        },\r\n\r\n        render: function () {\r\n            ctx.fillStyle = \"#ccc\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            //ctx.font = \"36px Arial\";\r\n            //ctx.fillStyle = \"#000\";\r\n            //ctx.fillText(\"hello\", 10, 100);\r\n        }\r\n    };\r\n})();",
    "var Graphics = (function () {\r\n    return {\r\n        /*\r\n            @param(number) timeStep The wait time between running the action (in ms).\r\n            @param(number) numTimes The number to times to run the action.\r\n            @param(function) callback The callback function.\r\n        */\r\n        repeatAction: function (timeStep, numTimes, callback) {\r\n            var num = 0;\r\n            var theAnimation = setInterval(function () {\r\n                if (num++ > numTimes) {\r\n                    clearInterval(theAnimation);\r\n                }\r\n                else {\r\n                    callback();\r\n                }\r\n            }, timeStep);\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"../linker.js\" />\r\n\r\n/*\r\n    @param(string) bgColor The view background color.\r\n    @param(Dormant) dormantL The player's dormant.\r\n    @param(Dormant) dormantR The opponent's dormant.\r\n*/\r\nfunction BattleView(bgColor, dormantL, dormantR) {\r\n    this.bgColor = bgColor;\r\n    this.dormantL = dormantL;\r\n    this.dormantR = dormantR;\r\n}\r\n\r\nBattleView.prototype = (function () {\r\n\r\n    var arrow = {\r\n        x: 43,\r\n        y: 350,\r\n        curSlot: 0\r\n    };\r\n\r\n    var Dir = Object.freeze({\r\n        RIGHT: 0,\r\n        LEFT: 1\r\n    });\r\n\r\n    var left = {\r\n        x: 30,\r\n        dir: Dir.RIGHT\r\n    };\r\n\r\n    function drawDormantHUD(dormant, x, y) {\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillText(dormant.name + \"  L\" + dormant.lvl, x + 40, y);\r\n        ctx.fillText(\"HP\", x, y + 20);\r\n\r\n        ctx.strokeStyle = \"#000\";\r\n        ctx.strokeRect(x + 20, y + 12, 100, 10);\r\n\r\n        ctx.fillStyle = \"red\";\r\n        ctx.fillRect(x + 21, y + 13, dormant.hp * (100/dormant.initHP) - 1, 8);\r\n    }\r\n\r\n    function drawHUD(dormant) {\r\n        ctx.strokeStyle = \"#000\";\r\n        ctx.strokeRect(20, 300, 500, 250);\r\n\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillText(\"ATK: \" + dormant.atk, 460, 320);\r\n        ctx.fillText(\"DEF: \" + dormant.def, 460, 340);\r\n    }\r\n\r\n    function drawActions(dormant) {\r\n        ctx.fillStyle = \"#000\";\r\n\r\n        for (var i = 0; i < 4; ++i) {\r\n            if (dormant.actions[i] === null) {\r\n                ctx.fillText(\"--\", 80, 350 + i * 30);\r\n            }\r\n            else {\r\n                ctx.fillText(dormant.actions[i].name, 80, 350 + i * 30);\r\n            }\r\n        }\r\n    }\r\n\r\n    function drawActionArrow() {\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillText(\">>\", arrow.x, arrow.y);\r\n    }\r\n\r\n\r\n    return {\r\n        update: function () {\r\n            switch(lastKeyUp){\r\n                case KeyCode.ENTER:\r\n                    left.dir = Dir.RIGHT;\r\n\r\n                    Graphics.repeatAction(6, 60, function () {\r\n                        if (left.dir === Dir.RIGHT && left.x > 60)\r\n                            left.dir = Dir.LEFT;\r\n\r\n                        if (left.dir === Dir.RIGHT)\r\n                            ++left.x;\r\n                        else\r\n                            --left.x;\r\n                    });\r\n\r\n                    this.dormantR.hp -= (this.dormantL.atk * this.dormantL.actions[arrow.curSlot].multiplier) / this.dormantR.def;\r\n                    lastKeyUp = KeyCode.EMPTY;\r\n                    break;\r\n                case KeyCode.UP:\r\n                    if (arrow.curSlot !== 0 && this.dormantL.actions[arrow.curSlot - 1] !== null) {\r\n                        --arrow.curSlot;\r\n                        arrow.y -= 30;\r\n                    }\r\n                    break;\r\n                case KeyCode.DOWN:\r\n                    if (arrow.curSlot !== 3 && this.dormantL.actions[arrow.curSlot + 1] !== null) {\r\n                        ++arrow.curSlot;\r\n                        arrow.y += 30;\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if (this.dormantR.hp <= 0) {\r\n                alert(\"You Win\");\r\n                location.reload();\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            // background\r\n            ctx.fillStyle = this.bgColor;\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            // left\r\n            drawDormantHUD(this.dormantL, 10, 15);\r\n            this.dormantL.draw(left.x, 90);\r\n            drawHUD(this.dormantL);\r\n            drawActions(this.dormantL);\r\n            drawActionArrow();\r\n\r\n            // right\r\n            drawDormantHUD(this.dormantR, canvas.width - 130, 15);\r\n            this.dormantR.draw(770, 90);\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"../linker.js\" />\r\n\r\n/*\r\n    @param(string) name The name of the dormant.\r\n    @param(number) atk The attack strength of the dormant.\r\n    @param(number) def The defense strength of the dormant.\r\n    @param(number) hp The total available health points of the dormant.\r\n    @param(array) actions The fight actions of the dormant.\r\n    @param(?number) lvl The level of the dormant. (1 by default)\r\n*/\r\nfunction Dormant(src, name, atk, def, hp, actions, lvl) {\r\n    var that = this;\r\n\r\n    this.img = new Image();\r\n    this.imgReady = false;\r\n    this.img.onload = function () {\r\n        that.imgReady = true;\r\n    };\r\n    this.img.src = \"img/\" + src;\r\n\r\n    this.name = name;\r\n    this.atk = atk;\r\n    this.def = def;\r\n    this.initHP = this.hp = hp;\r\n    this.actions = actions;\r\n    this.lvl = (typeof (lvl) !== \"undefined\") ? lvl : 1;\r\n\r\n\r\n\r\n}\r\n\r\nDormant.prototype = (function () {\r\n\r\n    return {\r\n        draw: function (x, y) {\r\n            if (this.imgReady) {\r\n                ctx.drawImage(this.img, x, y, this.img.width, this.img.height);\r\n            }\r\n        }\r\n    };\r\n})();\r\n",
    "var FightAction = Object.freeze({\r\n    TACKLE: {\r\n        name: \"TACKLE\",\r\n        multiplier: 1\r\n    },\r\n    HEAL: {\r\n        name: \"HEAL\",\r\n        multiplier: 1\r\n    },\r\n    DRAGONS_BREATH: {\r\n        name: \"DRAGONS_BREATH\",\r\n        multiplier: 5\r\n    }\r\n});",
    "/// <reference path=\"linker.js\" />\r\n\r\nvar game = new GameEngine();\r\ngame.start();\r\n\r\n\r\nvar actions = [FightAction.TACKLE, FightAction.DRAGONS_BREATH, null, null];\r\n\r\nvar malaise = new Dormant(\"malaise.png\", \"MALAISE\", 12, 8, 27, actions);\r\nvar erabor = new Dormant(\"erabor.png\", \"ERABOR\", 8, 12, 23, actions);\r\nview = new BattleView(\"#ddd\", malaise, erabor);"
  ]
}