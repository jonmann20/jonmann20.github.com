{
  "version": 3,
  "file": "pageDormanticide.js",
  "sources": [
    "games/dormanticide/js/view/OverworldView.js",
    "games/dormanticide/js/view/BattleView.js",
    "games/dormanticide/js/dormant/Dormant.js",
    "games/dormanticide/js/dormant/FightAction.js",
    "games/dormanticide/js/main.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,K;ACxhPA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ECvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;ACbA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA,K",
  "sourcesContent": [
    "/// <reference path=\"../linker.js\" />\r\n\r\nfunction OverworldView() {\r\n    this.privates = {};\r\n    this.init();\r\n}\r\n\r\nOverworldView.prototype = (function () {\r\n\r\n    var arrow = {\r\n        img: \"^^\"\r\n    };\r\n\r\n    return {\r\n        then: function(callback){\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function() {\r\n            arrow.x = 90;\r\n            arrow.y = canvas.height / 2 + 70;\r\n            arrow.slot = 0;\r\n        },\r\n\r\n        update: function () {\r\n            if (game.input.lastKeyDown === KeyCode.ENTER) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n                this.privates.callback();\r\n            }\r\n            else if (game.input.lastKeyDown === KeyCode.RIGHT) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n                \r\n                if (arrow.slot < 7) {\r\n                    arrow.x += 115;\r\n                    ++arrow.slot;\r\n                }\r\n            }\r\n            else if (game.input.lastKeyDown === KeyCode.LEFT) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                if (arrow.slot > 0) {\r\n                    arrow.x -= 115;\r\n                    --arrow.slot;\r\n                }\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            // background\r\n            ctx.fillStyle = \"#34282c\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            // levels\r\n            var size = 80, x, y;\r\n\r\n            for (var i = 0; i < 8; ++i) {\r\n                x = 60 + i * 115;\r\n                y = canvas.height / 2 - size / 2;\r\n\r\n                ctx.fillStyle = \"#fff\";\r\n                ctx.font = \"18px Arial\";\r\n                ctx.fillText(\"Level \" + (i+1), x + 10, y - 13);\r\n\r\n                ctx.fillStyle = \"red\";\r\n                ctx.fillRect(x, y, size, size);\r\n            }\r\n\r\n            // arrow\r\n            ctx.fillStyle = \"#fff\";\r\n            ctx.fillText(arrow.img, arrow.x, arrow.y);\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"../linker.js\" />\r\n\r\n/*\r\n    Implements GameView.\r\n\r\n    @param(string) bgColor The view background color.\r\n    @param(Dormant) dormantL The player's dormant.\r\n    @param(Dormant) dormantR The opponent's dormant.\r\n*/\r\nfunction BattleView(bgColor, dormantL, dormantR) {\r\n    this.privates = {\r\n        bgColor: bgColor,\r\n        dormantL: dormantL,\r\n        dormantR: dormantR\r\n    };\r\n\r\n    this.init();\r\n}\r\n\r\nBattleView.prototype = (function () {\r\n\r\n    var that,\r\n        arrow = {\r\n            img: \">>\"\r\n        },\r\n        left,\r\n        wasAttack,\r\n        wasAttackTimer,\r\n        fire,\r\n        theAttack,\r\n        dormantL,\r\n        dormantR\r\n    ;\r\n\r\n    function checkInput(dormantL, dormantR) {\r\n        switch(game.input.lastKeyDown) {\r\n            case KeyCode.ENTER:\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                theAttack.name = dormantL.actions[arrow.curSlot].name;\r\n                theAttack.atk = (dormantL.atk * dormantL.actions[arrow.curSlot].multiplier) / dormantR.def;\r\n\r\n                return true;\r\n                break;\r\n            case KeyCode.UP:\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                if(arrow.curSlot !== 0 && dormantL.actions[arrow.curSlot - 1] !== null) {\r\n                    --arrow.curSlot;\r\n                    arrow.y -= 30;\r\n                }\r\n                break;\r\n            case KeyCode.DOWN:\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                if(arrow.curSlot !== 3 && dormantL.actions[arrow.curSlot + 1] !== null) {\r\n                    ++arrow.curSlot;\r\n                    arrow.y += 30;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    function runTackleAnimation() {\r\n        left.dir = Dir.RIGHT;\r\n\r\n        game.graphics.repeatAction(6, 60, function() {\r\n            if(left.dir === Dir.RIGHT && left.x > 60) {\r\n                left.dir = Dir.LEFT;\r\n            }\r\n\r\n            if(left.dir === Dir.RIGHT)\r\n                ++left.x;\r\n            else\r\n                --left.x;\r\n\r\n            dormantR.hp -= theAttack.atk / 60;\r\n        });\r\n    }\r\n\r\n    /****** Render *****/\r\n    function drawDormantHUD(dormant, x, y, drawXP) {\r\n        // name\r\n        var str = dormant.name + \"  L\" + dormant.lvl;\r\n\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillText(str, x + ctx.measureText(str).width / 2, y);\r\n\r\n        // hp\r\n        ctx.fillText(\"HP\", x, y + 20);\r\n        ctx.strokeStyle = \"#000\";\r\n        ctx.strokeRect(x + 21, y + 12, 100, 10);\r\n\r\n        ctx.fillStyle = \"red\";\r\n        ctx.fillRect(x + 22, y + 13, dormant.hp * (100 / dormant.initHP) - 1, 8);\r\n\r\n        // xp\r\n        if(drawXP) {\r\n            ctx.fillStyle = \"#000\";\r\n            ctx.fillText(\"XP\", x, y + 40);\r\n            ctx.strokeStyle = \"#000\";\r\n            ctx.strokeRect(x + 21, y + 32, 100, 10);\r\n\r\n            ctx.fillStyle = \"#777\";\r\n            ctx.fillRect(x + 22, y + 33, dormant.xp * (100 / dormant.xpNeeded) - 1, 8);\r\n        }\r\n    }\r\n\r\n    function drawHUD() {\r\n        ctx.strokeStyle = \"#000\";\r\n        ctx.strokeRect(20, 300, 500, 250);\r\n\r\n        ctx.font = \"12px Arial\";\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillText(\"ATK: \" + dormantL.atk, 460, 320);\r\n        ctx.fillText(\"DEF: \" + dormantL.def, 460, 340);\r\n\r\n        drawActionList();\r\n        drawActionArrow();\r\n    }\r\n\r\n    function drawActionList() {\r\n        ctx.fillStyle = \"#000\";\r\n\r\n        for (var i = 0; i < 4; ++i) {\r\n            if (dormantL.actions[i] === null) {\r\n                ctx.fillText(\"--\", 80, 350 + i * 30);\r\n            }\r\n            else {\r\n                ctx.fillText(dormantL.actions[i].name, 80, 350 + i * 30);\r\n            }\r\n        }\r\n    }\r\n\r\n    function drawActionArrow() {\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillText(arrow.img, arrow.x, arrow.y);\r\n    }\r\n\r\n\r\n    return {\r\n        then: function(callback) {\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function() {\r\n            that = this;\r\n            arrow.x = 43;\r\n            arrow.y = 350;\r\n            arrow.curSlot = 0;\r\n\r\n            left = {\r\n                x: 30,\r\n                dir: Dir.RIGHT\r\n            };\r\n\r\n            fire = {\r\n                x: 0,\r\n                y: 0\r\n            };\r\n\r\n            wasAttack = false;\r\n            wasAttackTimer = 60;\r\n            theAttack = {\r\n                name: \"EMPTY\",\r\n                atk: 0\r\n            };\r\n\r\n            dormantL = this.privates.dormantL;\r\n            dormantR = this.privates.dormantR;\r\n        },\r\n\r\n        update: function() {\r\n            if(wasAttack) {\r\n                dormantR.hp -= theAttack.atk / 60;\r\n            }\r\n            if(!game.graphics.isAnimating) {\r\n                var _wasAttack = checkInput(dormantL, dormantR);\r\n                if(_wasAttack) {\r\n                    if(theAttack.name === FightAction.TACKLE.name) {\r\n                        runTackleAnimation();\r\n                    }\r\n                    else if(theAttack.name === FightAction.DRAGONS_BREATH.name) {\r\n                        wasAttack = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(dormantR.hp <= 0) {\r\n                dormantL.xp += 25;\r\n                this.privates.callback();\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            // background\r\n            ctx.fillStyle = this.privates.bgColor;\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            // left\r\n            drawDormantHUD(dormantL, 10, 15, true);\r\n            dormantL.draw(left.x, 90);\r\n            drawHUD();\r\n\r\n            // right\r\n            drawDormantHUD(dormantR, canvas.width - 130, 15, false);\r\n            dormantR.draw(770, 90);\r\n\r\n\r\n            // attack animation\r\n            if(wasAttack) {\r\n\r\n                var t = (wasAttackTimer % 40);\r\n                if(t >= 0 && t < 10) {\r\n                    fire.x = 0;\r\n                }\r\n                else if(t >= 10 && t < 20) {\r\n                    fire.x = 5;\r\n                }\r\n                else if(t >= 20 && t < 30) {\r\n                    fire.x = 0;\r\n                }\r\n                else if(t >= 30 && t < 40) {\r\n                    fire.x = -5;\r\n                }\r\n\r\n                ctx.fillStyle = \"red\";\r\n                ctx.fillRect(870 + fire.x, 242, 40, 12);\r\n                ctx.fillRect(880 + fire.x, 230, 30, 12);\r\n                ctx.fillRect(880 + fire.x, 218, 20, 12);\r\n\r\n\r\n                if(wasAttackTimer-- === 0) {\r\n                    wasAttack = false;\r\n                    wasAttackTimer = 60;\r\n                }\r\n            }\r\n\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"../linker.js\" />\r\n\r\n/*\r\n    @param(string) name The name of the dormant.\r\n    @param(number) atk The attack strength of the dormant.\r\n    @param(number) def The defense strength of the dormant.\r\n    @param(number) hp The total available health points of the dormant.\r\n    @param(array) actions The fight actions of the dormant.\r\n    @param(?number) lvl The level of the dormant. (1 by default)\r\n*/\r\nfunction Dormant(src, name, atk, def, hp, actions, lvl) {\r\n    var that = this;\r\n\r\n    this.img = new Image();\r\n    this.imgReady = false;\r\n    this.img.onload = function () {\r\n        that.imgReady = true;\r\n    };\r\n    this.img.src = \"img/\" + src;\r\n\r\n    this.name = name;\r\n    this.atk = atk;\r\n    this.def = def;\r\n    this.initHP = this.hp = hp;\r\n    this.actions = actions;\r\n    this.lvl = (typeof (lvl) !== \"undefined\") ? lvl : 1;\r\n    this.xp = 0;\r\n    this.xpNeeded = 50;\r\n}\r\n\r\nDormant.prototype = (function () {\r\n\r\n    return {\r\n        draw: function (x, y) {\r\n            if (this.imgReady) {\r\n                ctx.drawImage(this.img, x, y, this.img.width, this.img.height);\r\n            }\r\n        }\r\n    };\r\n})();\r\n",
    "var FightAction = Object.freeze({\r\n    TACKLE: {\r\n        name: \"TACKLE\",\r\n        multiplier: 1\r\n    },\r\n    HEAL: {\r\n        name: \"HEAL\",\r\n        multiplier: 1\r\n    },\r\n    DRAGONS_BREATH: {\r\n        name: \"DRAGONS BREATH\",\r\n        multiplier: 5\r\n    }\r\n});",
    "/// <reference path=\"linker.js\" />\r\n\r\n/*\r\n    The main class for dormanticide.\r\n    Declares game as a global.\r\n*/\r\n(function Main() {\r\n\r\n    game = new GameEngine();\r\n    game.start();\r\n\r\n    var curLvl = 1;\r\n\r\n    var titleView = new TitleView(\"Dormanticide\");\r\n    titleView.then(function () {\r\n        game.utils.switchView(overworldView);\r\n    });\r\n\r\n    var overworldView = new OverworldView();\r\n    overworldView.then(function () {\r\n        if (curLvl === 1)\r\n            game.utils.switchView(lvl1);\r\n        else\r\n            game.utils.switchView(lvl2);\r\n    });\r\n\r\n\r\n    var actions = [FightAction.TACKLE, FightAction.DRAGONS_BREATH, null, null];\r\n\r\n    var malaise = new Dormant(\"malaise.png\", \"MALAISE\", 12, 8, 27, actions);\r\n    var erabor = new Dormant(\"erabor.png\", \"ERABOR\", 8, 12, 23, actions);\r\n    var tildamesh = new Dormant(\"tildamesh.png\", \"TILDAMESH\", 8, 12, 23, actions);\r\n\r\n\r\n    var lvl1 = new BattleView(\"#ddd\", malaise, erabor);\r\n    lvl1.then(function () {\r\n        ++curLvl;\r\n        game.utils.switchView(overworldView);\r\n    });\r\n\r\n    var lvl2 = new BattleView(\"#ddd\", malaise, tildamesh);\r\n    lvl2.then(function () {\r\n        game.utils.switchView(overworldView);\r\n    });\r\n\r\n\r\n    game.view = titleView;\r\n})();"
  ]
}