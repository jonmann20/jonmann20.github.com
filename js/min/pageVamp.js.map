{
  "version": 3,
  "file": "pageVamp.js",
  "sources": [
    "games/vamp/js/view/LevelView.js",
    "games/vamp/js/level/level1.js",
    "games/vamp/js/vamp.js",
    "games/vamp/js/main.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,K;AC3EA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AC9CA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ECxEA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA",
  "sourcesContent": [
    "/// <reference path=\"../linker.js\" />\r\n\r\nfunction LevelView(player, curLvl) {\r\n    this.privates = {};\r\n    this.player = player;\r\n    this.curLvl = curLvl;\r\n\r\n    this.init();\r\n}\r\n\r\nLevelView.prototype = (function() {\r\n    var that,\r\n        onUpdateSet = false,\r\n        onRenderSet = false\r\n    ;\r\n\r\n\r\n    function checkCollision() {\r\n        if(that.player.invincible) {\r\n            if(that.player.invincibleTimer-- === 0) {\r\n                that.player.invincible = false;\r\n                that.player.invincibleTimer = 120;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        for(var i = 0; i < that.curLvl.projectiles.length; ++i){\r\n            var collided = SAT.testPolygonPolygon(that.player, that.curLvl.projectiles[i]);\r\n            if(collided) {\r\n                --that.player.hp;\r\n                that.player.invincible = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return {\r\n        then: function(callback){\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function(){\r\n            that = this;\r\n        },\r\n\r\n        update: function() {\r\n            this.curLvl.update();\r\n            this.player.update();\r\n\r\n            //if(onUpdateSet)\r\n            //    this.onUpdate();\r\n\r\n            checkCollision();\r\n        },\r\n\r\n        onUpdate: function(callback) {\r\n            onUpdateSet = true;\r\n            this.onUpdate = callback;\r\n        },\r\n\r\n        render: function () {\r\n            this.curLvl.render();\r\n            this.player.render();\r\n\r\n            //if(onRenderSet)\r\n            //    this.onRender();\r\n        },\r\n\r\n        onRender: function(callback) {\r\n            onRenderSet = true;\r\n            this.onRender = callback;\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"../linker.js\" />\r\n\r\nfunction Level1() {\r\n    \r\n    this.init();\r\n}\r\n\r\nLevel1.prototype = (function() {\r\n\r\n\r\n    return {\r\n        projectiles: [],\r\n\r\n\r\n        init: function() {\r\n            for(var i = 0; i < 10; ++i) {\r\n                var projectile = new SAT.Box(new SAT.Vector(\r\n                    Math.floor((Math.random() * canvas.width) + 0),      // random number between 0 and canvas.width\r\n                    canvas.height\r\n                ), 10, 20).toPolygon();\r\n\r\n                projectile.speed = Math.floor((Math.random() * 10) + 3) * 0.1;\r\n\r\n                this.projectiles.push(projectile);\r\n            }\r\n        },\r\n\r\n        update: function(){\r\n            for(var i = 0; i < this.projectiles.length; ++i) {\r\n                this.projectiles[i].pos.y -= this.projectiles[i].speed;\r\n            }\r\n        },\r\n\r\n        render: function() {\r\n            // background\r\n            ctx.fillStyle = \"#000\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            // projectiles\r\n\r\n            ctx.fillStyle = \"silver\";\r\n            for(var i = 0; i < this.projectiles.length; ++i){\r\n                ctx.fillRect(this.projectiles[i].pos.x, this.projectiles[i].pos.y, 10, 20);\r\n            }\r\n        }\r\n    };\r\n})();",
    "/// <reference path=\"linker.js\" />\r\n\r\nfunction Vamp() {\r\n    this.init();\r\n}\r\n\r\nVamp.prototype = (function() {\r\n    var img = new Image(),\r\n        imgReady = false\r\n    ;\r\n    img.onload = function() {\r\n        imgReady = true;\r\n    };\r\n    img.src = \"img/vamp.png\";\r\n\r\n    var speed = 4;\r\n\r\n    return {\r\n        w: 40,\r\n        h: 40,\r\n        hp: 3,\r\n        invincible: false,\r\n        invincibleTimer: 120,\r\n\r\n        init: function(){\r\n            $.extend(this, new SAT.Box(new SAT.Vector(0, 0), this.w, this.h).toPolygon());\r\n        },\r\n\r\n        update: function() {\r\n            // horizontal\r\n            if(game.input.keysDown[KeyCode.RIGHT]){\r\n                this.pos.x += speed;\r\n            }\r\n            else if(game.input.keysDown[KeyCode.LEFT]) {\r\n                this.pos.x -= speed;\r\n            }\r\n\r\n            // vertical\r\n            if(game.input.keysDown[KeyCode.UP]) {\r\n                this.pos.y -= speed;\r\n            }\r\n            else if(game.input.keysDown[KeyCode.DOWN]) {\r\n                this.pos.y += speed;\r\n            }\r\n\r\n            if(this.hp <= 0) {\r\n                alert(\"You died\");\r\n                location.reload();\r\n            }\r\n        },\r\n\r\n        render: function() {\r\n            // body\r\n            var doDraw = true;\r\n            if(this.invincible) {\r\n                var t = this.invincibleTimer % 30;\r\n                if(t >= 0 && t < 15)\r\n                    doDraw = false;\r\n            }\r\n\r\n            if(doDraw) {\r\n                ctx.fillStyle = \"yellow\";\r\n                ctx.fillRect(this.pos.x, this.pos.y, this.w, this.h);\r\n            }\r\n\r\n            // health\r\n            ctx.fillStyle = \"red\";\r\n            for(var i = 0; i < this.hp; ++i) {\r\n                ctx.fillRect(this.pos.x - 10 + i*20, this.pos.y - 20, 20, 10);\r\n            }\r\n        }\r\n    };\r\n})();\r\n",
    "/// <reference path=\"linker.js\" />\r\n\r\n/*\r\n    The vamp game.\r\n    Declares game as a global.\r\n*/\r\n(function Main() {\r\n    game = new GameEngine();\r\n    game.start();\r\n\r\n\r\n    var titleView = new TitleView(\"Vamp: The Great and Powerful\", true);\r\n    titleView.then(function () {\r\n        game.utils.switchView(saveView);\r\n    });\r\n\r\n    var saveView = new GameSaveView();\r\n    saveView.then(function (key) {\r\n        if (key === KeyCode.ESC) {\r\n            game.utils.switchView(titleView);\r\n        }\r\n        else if (key === KeyCode.ENTER) {\r\n            game.utils.switchView(lvlView);\r\n        }\r\n    });\r\n\r\n\r\n    var vamp = new Vamp();\r\n    var lvl1 = new Level1();\r\n\r\n    var lvlView = new LevelView(vamp, lvl1);\r\n\r\n    game.view = titleView;\r\n})();\r\n"
  ]
}