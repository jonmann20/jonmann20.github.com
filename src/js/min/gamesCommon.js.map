{"version":3,"sources":["..\\..\\..\\games\\common\\js\\GameEngine.js","..\\..\\..\\games\\common\\js\\GameSave.js","..\\..\\..\\games\\common\\js\\GameInput.js","..\\..\\..\\games\\common\\js\\GameUtils.js","..\\..\\..\\games\\common\\js\\physics\\SAT.js","..\\..\\..\\games\\common\\js\\graphics\\GameGraphics.js","..\\..\\..\\games\\common\\js\\view\\GameView.js","..\\..\\..\\games\\common\\js\\view\\TitleView.js","..\\..\\..\\games\\common\\js\\view\\GameSaveView.js"],"names":[],"mappings":"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","file":"gamesCommon.js","sourcesContent":["/// <reference path=\"commonLinker.js\" />\r\n\r\n/*\r\n    Declares two globals: canvas and ctx\r\n*/\r\nfunction GameEngine() {\r\n    // back button\r\n    var backBtn = document.createElement(\"a\");\r\n    backBtn.href = \"/#games\";\r\n    backBtn.innerText = \"Back\";\r\n    backBtn.className = \"btnBack\";\r\n    document.body.appendChild(backBtn);\r\n\r\n    // canvasWrap\r\n    var wrap = document.createElement(\"div\");\r\n    wrap.className = \"canvasWrap\";\r\n\r\n    // canvas\r\n    canvas = document.createElement(\"canvas\");\r\n    canvas.setAttribute(\"width\", 16*63);\r\n    canvas.setAttribute(\"height\", 9*63);\r\n    wrap.appendChild(canvas);\r\n    document.body.appendChild(wrap);\r\n\r\n    ctx = canvas.getContext(\"2d\");\r\n\r\n    this.input = new GameInput(this);\r\n    this.graphics = new GameGraphics(this);\r\n    this.utils = new GameUtils(this);\r\n    this.view = new GameView(this);\r\n\r\n    this.init();\r\n}\r\n\r\nGameEngine.prototype = (function() {\r\n    var that,\r\n        updateInterval,\r\n        renderRAF,\r\n        onUpdateSet = false,\r\n        onRenderSet = false\r\n    ;\r\n\r\n\r\n    function update() {\r\n        that.view.update();\r\n\r\n        if(onUpdateSet)\r\n            that.onUpdate();\r\n    }\r\n\r\n    function render() {\r\n        renderRAF = requestAnimationFrame(render);\r\n        that.view.render();\r\n\r\n        if(onRenderSet)\r\n            that.onRender();\r\n    }\r\n\r\n\r\n    return {\r\n        init: function(){\r\n            that = this;\r\n        },\r\n\r\n        onUpdate: function(callback) {\r\n            onUpdateSet = true;\r\n            this.onUpdate = callback;\r\n        },\r\n\r\n        onRender: function(callback) {\r\n            onRenderSet = true;\r\n            this.onRender = callback;\r\n        },\r\n\r\n        start: function() {\r\n            updateInterval = setInterval(update, 1000 / 60);\r\n            renderRAF = requestAnimationFrame(render);\r\n        },\r\n\r\n        stop: function() {\r\n            clearInterval(updateInterval);\r\n            cancelAnimationFrame(renderRAF);\r\n        }\r\n    };\r\n})();\r\n","/// <reference path=\"commonLinker.js\" />\r\n\r\nfunction GameSave() {\r\n\r\n}\r\n\r\nGameSave.prototype = (function () {\r\n    return {\r\n        load: function (slot) {\r\n            return localStorage[\"slot\" + slot];\r\n        },\r\n\r\n        getList: function () {\r\n            var zero = this.load(0),\r\n                one = this.load(1),\r\n                two = this.load(2),\r\n                def = \"---\"\r\n            ;\r\n            return list = [\r\n                (typeof(zero) !== \"undefined\") ? zero : def,\r\n                (typeof (one) !== \"undefined\") ? one : def,\r\n                (typeof (two) !== \"undefined\") ? two : def\r\n            ];\r\n        },\r\n\r\n        save: function (slot, data) {\r\n            localStorage[\"slot\" + slot] = data;\r\n        },\r\n\r\n        erase: function(slot){\r\n            localStorage.removeItem(\"slot\" + slot);\r\n            return this.getList();\r\n        }\r\n    };\r\n})();\r\n","/*\r\n    The input component of GameEngine.\r\n*/\r\nfunction GameInput() {\r\n    this.keysDown = {};\r\n    this.lastKeyUp = KeyCode.EMPTY;\r\n    this.lastKeyDown = KeyCode.EMPTY;\r\n\r\n    this.init();\r\n}\r\n\r\nGameInput.prototype = (function () {\r\n\r\n    var that;\r\n\r\n    function fixKey(key) {\r\n        if(key === KeyCode.W)\r\n            key = KeyCode.UP;\r\n        else if(key === KeyCode.S)\r\n            key = KeyCode.DOWN;\r\n        else if(key === KeyCode.D)\r\n            key = KeyCode.RIGHT;\r\n        else if(key === KeyCode.A)\r\n            key = KeyCode.LEFT;\r\n\r\n        return key;\r\n    }\r\n\r\n    addEventListener(\"keydown\", function(e) {\r\n        var key = fixKey(e.keyCode);\r\n\r\n        if(!that.keysDown[key]) {\r\n            that.lastKeyDown = key;\r\n            that.keysDown[key] = true;\r\n        }\r\n        \r\n        that.onKeyDown(key);\r\n    });\r\n\r\n    addEventListener(\"keyup\", function(e) {\r\n        that.lastKeyUp = fixKey(e.keyCode);\r\n        delete that.keysDown[that.lastKeyUp];\r\n    });\r\n\r\n\r\n    return {\r\n        init: function(){\r\n            that = this;\r\n        },\r\n\r\n        update: function () {\r\n\r\n        },\r\n\r\n        onKeyDown: function(callback) {\r\n            this.onKeyDown = callback;\r\n        }\r\n    };\r\n})();\r\n\r\n\r\n// global enums\r\nvar KeyCode = Object.freeze({\r\n    EMPTY: -1,\r\n    ENTER: 13,\r\n    CTRL: 17,\r\n    ESC: 27,\r\n    SPACEBAR: 32,\r\n    LEFT: 37,\r\n    UP: 38,\r\n    RIGHT: 39,\r\n    DOWN: 40,\r\n    DELETE: 46,\r\n    A: 65,\r\n    D: 68,\r\n    F: 70,\r\n    H: 72,\r\n    J: 74,\r\n    K: 75,\r\n    M: 77,\r\n    O: 79,\r\n    R: 82,\r\n    S: 83,\r\n    W: 87\r\n});\r\n\r\nvar KeyCodeNames = {};\r\nKeyCodeNames[-1] = \"EMPTY\";\r\nKeyCodeNames[13] = \"ENTER\";\r\nKeyCodeNames[17] = \"CTRL\";\r\nKeyCodeNames[27] = \"ESC\";\r\nKeyCodeNames[32] = \"SPACEBAR\";\r\nKeyCodeNames[37] = \"LEFT\";\r\nKeyCodeNames[38] = \"UP\";\r\nKeyCodeNames[39] = \"RIGHT\";\r\nKeyCodeNames[40] = \"DOWN\";\r\nKeyCodeNames[46] = \"DELETE\";\r\nKeyCodeNames[65] = \"A\";\r\nKeyCodeNames[68] = \"D\";\r\nKeyCodeNames[70] = \"F\";\r\nKeyCodeNames[72] = \"H\";\r\nKeyCodeNames[74] = \"J\";\r\nKeyCodeNames[75] = \"K\";\r\nKeyCodeNames[77] = \"M\";\r\nKeyCodeNames[79] = \"O\";\r\nKeyCodeNames[82] = \"R\";\r\nKeyCodeNames[83] = \"S\";\r\nKeyCodeNames[87] = \"W\";","/*\r\n    The utils component of GameEngine.\r\n*/\r\nfunction GameUtils(gEngine) {\r\n    return {\r\n        /*\r\n            Resets the newView's private variables.\r\n            Changes the view.\r\n        */\r\n        switchView: function(newView) {\r\n            newView.init();\r\n            gEngine.view = newView;\r\n        }\r\n    };\r\n}\r\n\r\n// global enums\r\nvar Dir = Object.freeze({\r\n    RIGHT: 0,\r\n    LEFT: 1\r\n});","// Version 0.2 - Copyright 2013 -  Jim Riecken <jimr@jimr.ca>\r\n//\r\n// Released under the MIT License - https://github.com/jriecken/sat-js\r\n//\r\n// A simple library for determining intersections of circles and\r\n// polygons using the Separating Axis Theorem.\r\n/** @preserve SAT.js - Version 0.2 - Copyright 2013 - Jim Riecken <jimr@jimr.ca> - released under the MIT License. https://github.com/jriecken/sat-js */\r\n\r\n/*global define: false, module: false*/\r\n/*jshint shadow:true, sub:true, forin:true, noarg:true, noempty:true, \r\n  eqeqeq:true, bitwise:true, strict:true, undef:true, \r\n  curly:true, browser:true */\r\n\r\n// Create a UMD wrapper for SAT. Works in:\r\n//\r\n//  - Plain browser via global SAT variable\r\n//  - AMD loader (like require.js)\r\n//  - Node.js\r\n//\r\n// The quoted properties all over the place are used so that the Closure Compiler\r\n// does not mangle the exposed API in advanced mode.\r\n/**\r\n * @param {*} root - The global scope\r\n * @param {Function} factory - Factory that creates SAT module\r\n */\r\n(function (root, factory) {\r\n  \"use strict\";\r\n  if (typeof define === 'function' && define['amd']) {\r\n    define(factory);\r\n  } else if (typeof exports === 'object') {\r\n    module['exports'] = factory();\r\n  } else {\r\n    root['SAT'] = factory();\r\n  }\r\n}(this, function () {\r\n  \"use strict\";\r\n\r\n  var SAT = {};\r\n\r\n  //\r\n  // ## Vector\r\n  //\r\n  // Represents a vector in two dimensions with `x` and `y` properties.\r\n\r\n\r\n  // Create a new Vector, optionally passing in the `x` and `y` coordinates. If\r\n  // a coordinate is not specified, it will be set to `0`\r\n  /** \r\n   * @param {?number=} x The x position.\r\n   * @param {?number=} y The y position.\r\n   * @constructor\r\n   */\r\n  function Vector(x, y) {\r\n    this['x'] = x || 0;\r\n    this['y'] = y || 0;\r\n  }\r\n  SAT['Vector'] = Vector;\r\n  // Alias `Vector` as `V`\r\n  SAT['V'] = Vector;\r\n\r\n\r\n  // Copy the values of another Vector into this one.\r\n  /**\r\n   * @param {Vector} other The other Vector.\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['copy'] = Vector.prototype.copy = function(other) {\r\n    this['x'] = other['x'];\r\n    this['y'] = other['y'];\r\n    return this;\r\n  };\r\n\r\n  // Change this vector to be perpendicular to what it was before. (Effectively\r\n  // roatates it 90 degrees in a clockwise direction)\r\n  /**\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['perp'] = Vector.prototype.perp = function() {\r\n    var x = this['x'];\r\n    this['x'] = this['y'];\r\n    this['y'] = -x;\r\n    return this;\r\n  };\r\n\r\n  // Rotate this vector (counter-clockwise) by the specified angle (in radians).\r\n  /**\r\n   * @param {number} angle The angle to rotate (in radians)\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['rotate'] = Vector.prototype.rotate = function (angle) {\r\n    var x = this['x'];\r\n    var y = this['y'];\r\n    this['x'] = x * Math.cos(angle) - y * Math.sin(angle);\r\n    this['y'] = x * Math.sin(angle) + y * Math.cos(angle);\r\n    return this;\r\n  };\r\n\r\n  // Reverse this vector.\r\n  /**\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['reverse'] = Vector.prototype.reverse = function() {\r\n    this['x'] = -this['x'];\r\n    this['y'] = -this['y'];\r\n    return this;\r\n  };\r\n  \r\n\r\n  // Normalize this vector.  (make it have length of `1`)\r\n  /**\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['normalize'] = Vector.prototype.normalize = function() {\r\n    var d = this.len();\r\n    if(d > 0) {\r\n      this['x'] = this['x'] / d;\r\n      this['y'] = this['y'] / d;\r\n    }\r\n    return this;\r\n  };\r\n  \r\n  // Add another vector to this one.\r\n  /**\r\n   * @param {Vector} other The other Vector.\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['add'] = Vector.prototype.add = function(other) {\r\n    this['x'] += other['x'];\r\n    this['y'] += other['y'];\r\n    return this;\r\n  };\r\n  \r\n  // Subtract another vector from this one.\r\n  /**\r\n   * @param {Vector} other The other Vector.\r\n   * @return {Vector} This for chaiing.\r\n   */\r\n  Vector.prototype['sub'] = Vector.prototype.sub = function(other) {\r\n    this['x'] -= other['x'];\r\n    this['y'] -= other['y'];\r\n    return this;\r\n  };\r\n  \r\n  // Scale this vector. An independant scaling factor can be provided\r\n  // for each axis, or a single scaling factor that will scale both `x` and `y`.\r\n  /**\r\n   * @param {number} x The scaling factor in the x direction.\r\n   * @param {?number=} y The scaling factor in the y direction.  If this\r\n   *   is not specified, the x scaling factor will be used.\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['scale'] = Vector.prototype.scale = function(x,y) {\r\n    this['x'] *= x;\r\n    this['y'] *= y || x;\r\n    return this; \r\n  };\r\n  \r\n  // Project this vector on to another vector.\r\n  /**\r\n   * @param {Vector} other The vector to project onto.\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['project'] = Vector.prototype.project = function(other) {\r\n    var amt = this.dot(other) / other.len2();\r\n    this['x'] = amt * other['x'];\r\n    this['y'] = amt * other['y'];\r\n    return this;\r\n  };\r\n  \r\n  // Project this vector onto a vector of unit length. This is slightly more efficient\r\n  // than `project` when dealing with unit vectors.\r\n  /**\r\n   * @param {Vector} other The unit vector to project onto.\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['projectN'] = Vector.prototype.projectN = function(other) {\r\n    var amt = this.dot(other);\r\n    this['x'] = amt * other['x'];\r\n    this['y'] = amt * other['y'];\r\n    return this;\r\n  };\r\n  \r\n  // Reflect this vector on an arbitrary axis.\r\n  /**\r\n   * @param {Vector} axis The vector representing the axis.\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['reflect'] = Vector.prototype.reflect = function(axis) {\r\n    var x = this['x'];\r\n    var y = this['y'];\r\n    this.project(axis).scale(2);\r\n    this['x'] -= x;\r\n    this['y'] -= y;\r\n    return this;\r\n  };\r\n  \r\n  // Reflect this vector on an arbitrary axis (represented by a unit vector). This is\r\n  // slightly more efficient than `reflect` when dealing with an axis that is a unit vector.\r\n  /**\r\n   * @param {Vector} axis The unit vector representing the axis.\r\n   * @return {Vector} This for chaining.\r\n   */\r\n  Vector.prototype['reflectN'] = Vector.prototype.reflectN = function(axis) {\r\n    var x = this['x'];\r\n    var y = this['y'];\r\n    this.projectN(axis).scale(2);\r\n    this['x'] -= x;\r\n    this['y'] -= y;\r\n    return this;\r\n  };\r\n  \r\n  // Get the dot product of this vector and another.\r\n  /**\r\n   * @param {Vector}  other The vector to dot this one against.\r\n   * @return {number} The dot product.\r\n   */\r\n  Vector.prototype['dot'] = Vector.prototype.dot = function(other) {\r\n    return this['x'] * other['x'] + this['y'] * other['y'];\r\n  };\r\n  \r\n  // Get the squared length of this vector.\r\n  /**\r\n   * @return {number} The length^2 of this vector.\r\n   */\r\n  Vector.prototype['len2'] = Vector.prototype.len2 = function() {\r\n    return this.dot(this);\r\n  };\r\n  \r\n  // Get the length of this vector.\r\n  /**\r\n   * @return {number} The length of this vector.\r\n   */\r\n  Vector.prototype['len'] = Vector.prototype.len = function() {\r\n    return Math.sqrt(this.len2());\r\n  };\r\n  \r\n  // ## Circle\r\n  //\r\n  // Represents a circle with a position and a radius.\r\n\r\n  // Create a new circle, optionally passing in a position and/or radius. If no position\r\n  // is given, the circle will be at `(0,0)`. If no radius is provided, the circle will\r\n  // have a radius of `0`.\r\n  /**\r\n   * @param {Vector=} pos A vector representing the position of the center of the circle\r\n   * @param {?number=} r The radius of the circle\r\n   * @constructor\r\n   */\r\n  function Circle(pos, r) {\r\n    this['pos'] = pos || new Vector();\r\n    this['r'] = r || 0;\r\n  }\r\n  SAT['Circle'] = Circle;\r\n\r\n  // ## Polygon\r\n  //\r\n  // Represents a *convex* polygon with any number of points (specified in counter-clockwise order)\r\n  //\r\n  // The edges/normals of the polygon will be calculated on creation and stored in the\r\n  // `edges` and `normals` properties. If you change the polygon's points, you will need\r\n  // to call `recalc` to recalculate the edges/normals.\r\n\r\n  // Create a new polygon, passing in a position vector, and an array of points (represented\r\n  // by vectors relative to the position vector). If no position is passed in, the position\r\n  // of the polygon will be `(0,0)`.\r\n  /**\r\n   * @param {Vector=} pos A vector representing the origin of the polygon. (all other\r\n   *   points are relative to this one)\r\n   * @param {Array.<Vector>=} points An array of vectors representing the points in the polygon,\r\n   *   in counter-clockwise order.\r\n   * @constructor\r\n   */\r\n  function Polygon(pos, points) {\r\n    this['pos'] = pos || new Vector();\r\n    this['points'] = points || [];\r\n    this.recalc();\r\n  }\r\n  SAT['Polygon'] = Polygon;\r\n  \r\n  // Recalculates the edges and normals of the polygon. This **must** be called\r\n  // if the `points` array is modified at all and the edges or normals are to be\r\n  // accessed.\r\n  /**\r\n   * @return {Polygon} This for chaining.\r\n   */\r\n  Polygon.prototype['recalc'] = Polygon.prototype.recalc = function() {\r\n    // The edges here are the direction of the `n`th edge of the polygon, relative to\r\n    // the `n`th point. If you want to draw a given edge from the edge value, you must\r\n    // first translate to the position of the starting point.\r\n    this['edges'] = [];\r\n    // The normals here are the direction of the normal for the `n`th edge of the polygon, relative\r\n    // to the position of the `n`th point. If you want to draw an edge normal, you must first\r\n    // translate to the position of the starting point.\r\n    this['normals'] = [];\r\n    var points = this['points'];\r\n    var len = points.length;\r\n    for (var i = 0; i < len; i++) {\r\n      var p1 = points[i]; \r\n      var p2 = i < len - 1 ? points[i + 1] : points[0];\r\n      var e = new Vector().copy(p2).sub(p1);\r\n      var n = new Vector().copy(e).perp().normalize();\r\n      this['edges'].push(e);\r\n      this['normals'].push(n);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  // Rotates this polygon counter-clockwise around the origin of *its local coordinate system* (i.e. `pos`).\r\n  //\r\n  // Note: You do **not** need to call `recalc` after rotation.\r\n  /**\r\n   * @param {number} angle The angle to rotate (in radians)\r\n   * @return {Polygon} This for chaining.\r\n   */\r\n  Polygon.prototype['rotate'] = Polygon.prototype.rotate = function(angle) {\r\n    var i;\r\n    var points = this['points'];\r\n    var edges = this['edges'];\r\n    var normals = this['normals'];\r\n    var len = points.length;\r\n    for (i = 0; i < len; i++) {\r\n      points[i].rotate(angle);\r\n      edges[i].rotate(angle);\r\n      normals[i].rotate(angle);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  // Translates the points of this polygon by a specified amount relative to the origin of *its own coordinate\r\n  // system* (i.e. `pos`).\r\n  //\r\n  // This is most useful to change the \"center point\" of a polygon.\r\n  //\r\n  // Note: You do **not** need to call `recalc` after translation.\r\n  /**\r\n   * @param {number} x The horizontal amount to translate.\r\n   * @param {number} y The vertical amount to translate.\r\n   * @return {Polygon} This for chaining.\r\n   */\r\n  Polygon.prototype['translate'] = Polygon.prototype.translate = function (x, y) {\r\n    var i;\r\n    var points = this['points'];\r\n    var len = points.length;\r\n    for (i = 0; i < len; i++) {\r\n      points[i].x += x;\r\n      points[i].y += y;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  // ## Box\r\n  //\r\n  // Represents an axis-aligned box, with a width and height.\r\n\r\n\r\n  // Create a new box, with the specified position, width, and height. If no position\r\n  // is given, the position will be `(0,0)`. If no width or height are given, they will\r\n  // be set to `0`.\r\n  /**\r\n   * @param {Vector=} pos A vector representing the top-left of the box.\r\n   * @param {?number=} w The width of the box.\r\n   * @param {?number=} h The height of the box.\r\n   * @constructor\r\n   */\r\n  function Box(pos, w, h) {\r\n    this['pos'] = pos || new Vector();\r\n    this['w'] = w || 0;\r\n    this['h'] = h || 0;\r\n  }\r\n  SAT['Box'] = Box;\r\n\r\n  // Returns a polygon whose edges are the same as this box.\r\n  /**\r\n   * @return {Polygon} A new Polygon that represents this box.\r\n   */\r\n  Box.prototype['toPolygon'] = Box.prototype.toPolygon = function() {\r\n    var pos = this['pos'];\r\n    var w = this['w'];\r\n    var h = this['h'];\r\n    return new Polygon(new Vector(pos['x'], pos['y']), [\r\n     new Vector(), new Vector(w, 0), \r\n     new Vector(w,h), new Vector(0,h)\r\n    ]);\r\n  };\r\n  \r\n  // ## Response\r\n  //\r\n  // An object representing the result of an intersection. Contains:\r\n  //  - The two objects participating in the intersection\r\n  //  - The vector representing the minimum change necessary to extract the first object\r\n  //    from the second one (as well as a unit vector in that direction and the magnitude\r\n  //    of the overlap)\r\n  //  - Whether the first object is entirely inside the second, and vice versa.\r\n  /**\r\n   * @constructor\r\n   */  \r\n  function Response() {\r\n    this['a'] = null;\r\n    this['b'] = null;\r\n    this['overlapN'] = new Vector();\r\n    this['overlapV'] = new Vector();\r\n    this.clear();\r\n  }\r\n  SAT['Response'] = Response;\r\n\r\n  // Set some values of the response back to their defaults.  Call this between tests if\r\n  // you are going to reuse a single Response object for multiple intersection tests (recommented\r\n  // as it will avoid allcating extra memory)\r\n  /**\r\n   * @return {Response} This for chaining\r\n   */\r\n  Response.prototype['clear'] = Response.prototype.clear = function() {\r\n    this['aInB'] = true;\r\n    this['bInA'] = true;\r\n    this['overlap'] = Number.MAX_VALUE;\r\n    return this;\r\n  };\r\n\r\n  // ## Object Pools\r\n\r\n  // A pool of `Vector` objects that are used in calculations to avoid\r\n  // allocating memory.\r\n  /**\r\n   * @type {Array.<Vector>}\r\n   */\r\n  var T_VECTORS = [];\r\n  for (var i = 0; i < 10; i++) { T_VECTORS.push(new Vector()); }\r\n  \r\n  // A pool of arrays of numbers used in calculations to avoid allocating\r\n  // memory.\r\n  /**\r\n   * @type {Array.<Array.<number>>}\r\n   */\r\n  var T_ARRAYS = [];\r\n  for (var i = 0; i < 5; i++) { T_ARRAYS.push([]); }\r\n\r\n  // ## Helper Functions\r\n\r\n  // Flattens the specified array of points onto a unit vector axis,\r\n  // resulting in a one dimensional range of the minimum and\r\n  // maximum value on that axis.\r\n  /**\r\n   * @param {Array.<Vector>} points The points to flatten.\r\n   * @param {Vector} normal The unit vector axis to flatten on.\r\n   * @param {Array.<number>} result An array.  After calling this function,\r\n   *   result[0] will be the minimum value,\r\n   *   result[1] will be the maximum value.\r\n   */\r\n  function flattenPointsOn(points, normal, result) {\r\n    var min = Number.MAX_VALUE;\r\n    var max = -Number.MAX_VALUE;\r\n    var len = points.length;\r\n    for (var i = 0; i < len; i++ ) {\r\n      // The magnitude of the projection of the point onto the normal\r\n      var dot = points[i].dot(normal);\r\n      if (dot < min) { min = dot; }\r\n      if (dot > max) { max = dot; }\r\n    }\r\n    result[0] = min; result[1] = max;\r\n  }\r\n  \r\n  // Check whether two convex polygons are separated by the specified\r\n  // axis (must be a unit vector).\r\n  /**\r\n   * @param {Vector} aPos The position of the first polygon.\r\n   * @param {Vector} bPos The position of the second polygon.\r\n   * @param {Array.<Vector>} aPoints The points in the first polygon.\r\n   * @param {Array.<Vector>} bPoints The points in the second polygon.\r\n   * @param {Vector} axis The axis (unit sized) to test against.  The points of both polygons\r\n   *   will be projected onto this axis.\r\n   * @param {Response=} response A Response object (optional) which will be populated\r\n   *   if the axis is not a separating axis.\r\n   * @return {boolean} true if it is a separating axis, false otherwise.  If false,\r\n   *   and a response is passed in, information about how much overlap and\r\n   *   the direction of the overlap will be populated.\r\n   */\r\n  function isSeparatingAxis(aPos, bPos, aPoints, bPoints, axis, response) {\r\n    var rangeA = T_ARRAYS.pop();\r\n    var rangeB = T_ARRAYS.pop();\r\n    // The magnitude of the offset between the two polygons\r\n    var offsetV = T_VECTORS.pop().copy(bPos).sub(aPos);\r\n    var projectedOffset = offsetV.dot(axis);\r\n    // Project the polygons onto the axis.\r\n    flattenPointsOn(aPoints, axis, rangeA);\r\n    flattenPointsOn(bPoints, axis, rangeB);\r\n    // Move B's range to its position relative to A.\r\n    rangeB[0] += projectedOffset;\r\n    rangeB[1] += projectedOffset;\r\n    // Check if there is a gap. If there is, this is a separating axis and we can stop\r\n    if (rangeA[0] > rangeB[1] || rangeB[0] > rangeA[1]) {\r\n      T_VECTORS.push(offsetV); \r\n      T_ARRAYS.push(rangeA); \r\n      T_ARRAYS.push(rangeB);\r\n      return true;\r\n    }\r\n    // This is not a separating axis. If we're calculating a response, calculate the overlap.\r\n    if (response) {\r\n      var overlap = 0;\r\n      // A starts further left than B\r\n      if (rangeA[0] < rangeB[0]) {\r\n        response['aInB'] = false;\r\n        // A ends before B does. We have to pull A out of B\r\n        if (rangeA[1] < rangeB[1]) { \r\n          overlap = rangeA[1] - rangeB[0];\r\n          response['bInA'] = false;\r\n        // B is fully inside A.  Pick the shortest way out.\r\n        } else {\r\n          var option1 = rangeA[1] - rangeB[0];\r\n          var option2 = rangeB[1] - rangeA[0];\r\n          overlap = option1 < option2 ? option1 : -option2;\r\n        }\r\n      // B starts further left than A\r\n      } else {\r\n        response['bInA'] = false;\r\n        // B ends before A ends. We have to push A out of B\r\n        if (rangeA[1] > rangeB[1]) { \r\n          overlap = rangeA[0] - rangeB[1];\r\n          response['aInB'] = false;\r\n        // A is fully inside B.  Pick the shortest way out.\r\n        } else {\r\n          var option1 = rangeA[1] - rangeB[0];\r\n          var option2 = rangeB[1] - rangeA[0];\r\n          overlap = option1 < option2 ? option1 : -option2;\r\n        }\r\n      }\r\n      // If this is the smallest amount of overlap we've seen so far, set it as the minimum overlap.\r\n      var absOverlap = Math.abs(overlap);\r\n      if (absOverlap < response['overlap']) {\r\n        response['overlap'] = absOverlap;\r\n        response['overlapN'].copy(axis);\r\n        if (overlap < 0) {\r\n          response['overlapN'].reverse();\r\n        }\r\n      }      \r\n    }\r\n    T_VECTORS.push(offsetV); \r\n    T_ARRAYS.push(rangeA); \r\n    T_ARRAYS.push(rangeB);\r\n    return false;\r\n  }\r\n  \r\n  // Calculates which Vornoi region a point is on a line segment.\r\n  // It is assumed that both the line and the point are relative to `(0,0)`\r\n  //\r\n  //            |       (0)      |\r\n  //     (-1)  [S]--------------[E]  (1)\r\n  //            |       (0)      |\r\n  /**\r\n   * @param {Vector} line The line segment.\r\n   * @param {Vector} point The point.\r\n   * @return  {number} LEFT_VORNOI_REGION (-1) if it is the left region, \r\n   *          MIDDLE_VORNOI_REGION (0) if it is the middle region, \r\n   *          RIGHT_VORNOI_REGION (1) if it is the right region.\r\n   */\r\n  function vornoiRegion(line, point) {\r\n    var len2 = line.len2();\r\n    var dp = point.dot(line);\r\n    // If the point is beyond the start of the line, it is in the\r\n    // left vornoi region.\r\n    if (dp < 0) { return LEFT_VORNOI_REGION; }\r\n    // If the point is beyond the end of the line, it is in the\r\n    // right vornoi region.\r\n    else if (dp > len2) { return RIGHT_VORNOI_REGION; }\r\n    // Otherwise, it's in the middle one.\r\n    else { return MIDDLE_VORNOI_REGION; }\r\n  }\r\n  // Constants for Vornoi regions\r\n  /**\r\n   * @const\r\n   */\r\n  var LEFT_VORNOI_REGION = -1;\r\n  /**\r\n   * @const\r\n   */\r\n  var MIDDLE_VORNOI_REGION = 0;\r\n  /**\r\n   * @const\r\n   */\r\n  var RIGHT_VORNOI_REGION = 1;\r\n  \r\n  // ## Collision Tests\r\n\r\n  // Check if two circles collide.\r\n  /**\r\n   * @param {Circle} a The first circle.\r\n   * @param {Circle} b The second circle.\r\n   * @param {Response=} response Response object (optional) that will be populated if\r\n   *   the circles intersect.\r\n   * @return {boolean} true if the circles intersect, false if they don't. \r\n   */\r\n  function testCircleCircle(a, b, response) {\r\n    // Check if the distance between the centers of the two\r\n    // circles is greater than their combined radius.\r\n    var differenceV = T_VECTORS.pop().copy(b['pos']).sub(a['pos']);\r\n    var totalRadius = a['r'] + b['r'];\r\n    var totalRadiusSq = totalRadius * totalRadius;\r\n    var distanceSq = differenceV.len2();\r\n    // If the distance is bigger than the combined radius, they don't intersect.\r\n    if (distanceSq > totalRadiusSq) {\r\n      T_VECTORS.push(differenceV);\r\n      return false;\r\n    }\r\n    // They intersect.  If we're calculating a response, calculate the overlap.\r\n    if (response) { \r\n      var dist = Math.sqrt(distanceSq);\r\n      response['a'] = a;\r\n      response['b'] = b;\r\n      response['overlap'] = totalRadius - dist;\r\n      response['overlapN'].copy(differenceV.normalize());\r\n      response['overlapV'].copy(differenceV).scale(response['overlap']);\r\n      response['aInB']= a['r'] <= b['r'] && dist <= b['r'] - a['r'];\r\n      response['bInA'] = b['r'] <= a['r'] && dist <= a['r'] - b['r'];\r\n    }\r\n    T_VECTORS.push(differenceV);\r\n    return true;\r\n  }\r\n  SAT['testCircleCircle'] = testCircleCircle;\r\n  \r\n  // Check if a polygon and a circle collide.\r\n  /**\r\n   * @param {Polygon} polygon The polygon.\r\n   * @param {Circle} circle The circle.\r\n   * @param {Response=} response Response object (optional) that will be populated if\r\n   *   they interset.\r\n   * @return {boolean} true if they intersect, false if they don't.\r\n   */\r\n  function testPolygonCircle(polygon, circle, response) {\r\n    // Get the position of the circle relative to the polygon.\r\n    var circlePos = T_VECTORS.pop().copy(circle['pos']).sub(polygon['pos']);\r\n    var radius = circle['r'];\r\n    var radius2 = radius * radius;\r\n    var points = polygon['points'];\r\n    var len = points.length;\r\n    var edge = T_VECTORS.pop();\r\n    var point = T_VECTORS.pop();\r\n    \r\n    // For each edge in the polygon:\r\n    for (var i = 0; i < len; i++) {\r\n      var next = i === len - 1 ? 0 : i + 1;\r\n      var prev = i === 0 ? len - 1 : i - 1;\r\n      var overlap = 0;\r\n      var overlapN = null;\r\n      \r\n      // Get the edge.\r\n      edge.copy(polygon['edges'][i]);\r\n      // Calculate the center of the circle relative to the starting point of the edge.\r\n      point.copy(circlePos).sub(points[i]);\r\n      \r\n      // If the distance between the center of the circle and the point\r\n      // is bigger than the radius, the polygon is definitely not fully in\r\n      // the circle.\r\n      if (response && point.len2() > radius2) {\r\n        response['aInB'] = false;\r\n      }\r\n      \r\n      // Calculate which Vornoi region the center of the circle is in.\r\n      var region = vornoiRegion(edge, point);\r\n      // If it's the left region:\r\n      if (region === LEFT_VORNOI_REGION) { \r\n        // We need to make sure we're in the RIGHT_VORNOI_REGION of the previous edge.\r\n        edge.copy(polygon['edges'][prev]);\r\n        // Calculate the center of the circle relative the starting point of the previous edge\r\n        var point2 = T_VECTORS.pop().copy(circlePos).sub(points[prev]);\r\n        region = vornoiRegion(edge, point2);\r\n        if (region === RIGHT_VORNOI_REGION) {\r\n          // It's in the region we want.  Check if the circle intersects the point.\r\n          var dist = point.len();\r\n          if (dist > radius) {\r\n            // No intersection\r\n            T_VECTORS.push(circlePos); \r\n            T_VECTORS.push(edge);\r\n            T_VECTORS.push(point); \r\n            T_VECTORS.push(point2);\r\n            return false;\r\n          } else if (response) {\r\n            // It intersects, calculate the overlap.\r\n            response['bInA'] = false;\r\n            overlapN = point.normalize();\r\n            overlap = radius - dist;\r\n          }\r\n        }\r\n        T_VECTORS.push(point2);\r\n      // If it's the right region:\r\n      } else if (region === RIGHT_VORNOI_REGION) {\r\n        // We need to make sure we're in the left region on the next edge\r\n        edge.copy(polygon['edges'][next]);\r\n        // Calculate the center of the circle relative to the starting point of the next edge.\r\n        point.copy(circlePos).sub(points[next]);\r\n        region = vornoiRegion(edge, point);\r\n        if (region === LEFT_VORNOI_REGION) {\r\n          // It's in the region we want.  Check if the circle intersects the point.\r\n          var dist = point.len();\r\n          if (dist > radius) {\r\n            // No intersection\r\n            T_VECTORS.push(circlePos); \r\n            T_VECTORS.push(edge); \r\n            T_VECTORS.push(point);\r\n            return false;              \r\n          } else if (response) {\r\n            // It intersects, calculate the overlap.\r\n            response['bInA'] = false;\r\n            overlapN = point.normalize();\r\n            overlap = radius - dist;\r\n          }\r\n        }\r\n      // Otherwise, it's the middle region:\r\n      } else {\r\n        // Need to check if the circle is intersecting the edge,\r\n        // Change the edge into its \"edge normal\".\r\n        var normal = edge.perp().normalize();\r\n        // Find the perpendicular distance between the center of the \r\n        // circle and the edge.\r\n        var dist = point.dot(normal);\r\n        var distAbs = Math.abs(dist);\r\n        // If the circle is on the outside of the edge, there is no intersection.\r\n        if (dist > 0 && distAbs > radius) {\r\n          // No intersection\r\n          T_VECTORS.push(circlePos); \r\n          T_VECTORS.push(normal); \r\n          T_VECTORS.push(point);\r\n          return false;\r\n        } else if (response) {\r\n          // It intersects, calculate the overlap.\r\n          overlapN = normal;\r\n          overlap = radius - dist;\r\n          // If the center of the circle is on the outside of the edge, or part of the\r\n          // circle is on the outside, the circle is not fully inside the polygon.\r\n          if (dist >= 0 || overlap < 2 * radius) {\r\n            response['bInA'] = false;\r\n          }\r\n        }\r\n      }\r\n      \r\n      // If this is the smallest overlap we've seen, keep it. \r\n      // (overlapN may be null if the circle was in the wrong Vornoi region).\r\n      if (overlapN && response && Math.abs(overlap) < Math.abs(response['overlap'])) {\r\n        response['overlap'] = overlap;\r\n        response['overlapN'].copy(overlapN);\r\n      }\r\n    }\r\n    \r\n    // Calculate the final overlap vector - based on the smallest overlap.\r\n    if (response) {\r\n      response['a'] = polygon;\r\n      response['b'] = circle;\r\n      response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\r\n    }\r\n    T_VECTORS.push(circlePos); \r\n    T_VECTORS.push(edge); \r\n    T_VECTORS.push(point);\r\n    return true;\r\n  }\r\n  SAT['testPolygonCircle'] = testPolygonCircle;\r\n  \r\n  // Check if a circle and a polygon collide.\r\n  //\r\n  // **NOTE:** This is slightly less efficient than polygonCircle as it just\r\n  // runs polygonCircle and reverses everything at the end.\r\n  /**\r\n   * @param {Circle} circle The circle.\r\n   * @param {Polygon} polygon The polygon.\r\n   * @param {Response=} response Response object (optional) that will be populated if\r\n   *   they interset.\r\n   * @return {boolean} true if they intersect, false if they don't.\r\n   */\r\n  function testCirclePolygon(circle, polygon, response) {\r\n    // Test the polygon against the circle.\r\n    var result = testPolygonCircle(polygon, circle, response);\r\n    if (result && response) {\r\n      // Swap A and B in the response.\r\n      var a = response['a'];\r\n      var aInB = response['aInB'];\r\n      response['overlapN'].reverse();\r\n      response['overlapV'].reverse();\r\n      response['a'] = response['b'];\r\n      response['b'] = a;\r\n      response['aInB'] = response['bInA'];\r\n      response['bInA'] = aInB;\r\n    }\r\n    return result;\r\n  }\r\n  SAT['testCirclePolygon'] = testCirclePolygon;\r\n  \r\n  // Checks whether polygons collide.\r\n  /**\r\n   * @param {Polygon} a The first polygon.\r\n   * @param {Polygon} b The second polygon.\r\n   * @param {Response=} response Response object (optional) that will be populated if\r\n   *   they interset.\r\n   * @return {boolean} true if they intersect, false if they don't.\r\n   */\r\n  function testPolygonPolygon(a, b, response) {\r\n    var aPoints = a['points'];\r\n    var aLen = aPoints.length;\r\n    var bPoints = b['points'];\r\n    var bLen = bPoints.length;\r\n    // If any of the edge normals of A is a separating axis, no intersection.\r\n    for (var i = 0; i < aLen; i++) {\r\n      if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, a['normals'][i], response)) {\r\n        return false;\r\n      }\r\n    }\r\n    // If any of the edge normals of B is a separating axis, no intersection.\r\n    for (var i = 0;i < bLen; i++) {\r\n      if (isSeparatingAxis(a['pos'], b['pos'], aPoints, bPoints, b['normals'][i], response)) {\r\n        return false;\r\n      }\r\n    }\r\n    // Since none of the edge normals of A or B are a separating axis, there is an intersection\r\n    // and we've already calculated the smallest overlap (in isSeparatingAxis).  Calculate the\r\n    // final overlap vector.\r\n    if (response) {\r\n      response['a'] = a;\r\n      response['b'] = b;\r\n      response['overlapV'].copy(response['overlapN']).scale(response['overlap']);\r\n    }\r\n    return true;\r\n  }\r\n  SAT['testPolygonPolygon'] = testPolygonPolygon;\r\n\r\n  return SAT;\r\n}));","/*\r\n    The graphics component of GameEngine.\r\n*/\r\nvar GameGraphics = function(gEngine) {\r\n    return {\r\n        isAnimating: false,\r\n\r\n        /*\r\n            @param(number) timeStep The wait time between running the action (in ms).\r\n            @param(number) numTimes The number to times to run the action.\r\n            @param(function) callback The callback function.\r\n        */\r\n        repeatAction: function(timeStep, numTimes, callback) {\r\n            this.isAnimating = true;\r\n\r\n            var num = 0,\r\n                that = this\r\n            ;\r\n\r\n            var theAnimation = setInterval(function() {\r\n                if(num++ > numTimes) {\r\n                    clearInterval(theAnimation);\r\n                    that.isAnimating = false;\r\n                }\r\n                else {\r\n                    callback();\r\n                }\r\n            }, timeStep);\r\n        }\r\n    };\r\n};\r\n","/// <reference path=\"../commonLinker.js\" />\r\n\r\n/*\r\n    A generic view interface.\r\n*/\r\nfunction GameView(gEngine) {\r\n    this.privates = {\r\n        bgColor: \"#ccc\"\r\n    };\r\n\r\n    this.init();\r\n}\r\n\r\nGameView.prototype = (function () {\r\n\r\n    return {\r\n        then: function(callback){\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function(){\r\n\r\n        },\r\n\r\n        update: function () {\r\n\r\n        },\r\n\r\n        render: function () {\r\n            ctx.fillStyle = this.privates.bgColor;\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        }\r\n    };\r\n})();\r\n","/// <reference path=\"../commonLinker.js\" />\r\n\r\n/*\r\n    Implements GameView.\r\n\r\n    @param(string) title The name of the game.\r\n*/\r\nfunction TitleView(title) {\r\n    this.privates = {\r\n        title: title\r\n    };\r\n\r\n    this.init();\r\n}\r\n\r\nTitleView.prototype = (function () {\r\n    var title,\r\n        cta = \"Press Enter\"\r\n    ;\r\n\r\n    return {\r\n        then: function(callback){\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function(){\r\n            title = this.privates.title;\r\n        },\r\n\r\n        update: function () {\r\n            if (game.input.lastKeyDown === KeyCode.ENTER) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n                this.privates.callback();\r\n            }\r\n        },\r\n\r\n        render: function () {\r\n            ctx.fillStyle = \"#000\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            ctx.font = \"36px Arial\"\r\n            ctx.fillStyle = \"#fff\";\r\n            ctx.fillText(title, canvas.width / 2 - ctx.measureText(title).width / 2, 100);\r\n\r\n            ctx.font = \"24px Arial\";\r\n            ctx.fillText(cta, canvas.width / 2 - ctx.measureText(cta).width / 2, canvas.height / 2);\r\n        }\r\n    };\r\n})();","/// <reference path=\"../commonLinker.js\" />\r\n\r\nfunction GameSaveView() {\r\n    this.privates = {};\r\n\r\n    this.init();\r\n}\r\n\r\nGameSaveView.prototype = (function() {\r\n    var that,\r\n        title = \"Select a save slot\",\r\n        cta = \"Press Delete to erase a save\",\r\n        storage = new GameSave(),\r\n        list = storage.getList(),\r\n        arrow\r\n    ;\r\n\r\n    return {\r\n        then: function(callback) {\r\n            this.privates.callback = callback;\r\n        },\r\n\r\n        init: function() {\r\n            that = this;\r\n\r\n            arrow = {\r\n                img: \">>\",\r\n                slot: 0,\r\n                x: canvas.width / 2 - ctx.measureText(list[0]).width / 2 - 60,    // TODO: make instance var??\r\n                y: 200\r\n            };\r\n        },\r\n\r\n        update: function() {\r\n            if(game.input.lastKeyDown === KeyCode.ESC) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n                this.privates.callback(KeyCode.ESC);\r\n            }\r\n            else if(game.input.lastKeyDown === KeyCode.ENTER) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                var date = new Date();\r\n                var m = date.getMonth();\r\n                var d = date.getDay();\r\n                var y = date.getYear();\r\n                var t = date.toLocaleTimeString();\r\n\r\n                storage.save(arrow.slot, m + '/' + d + '/' + y + ' ' + t);\r\n                this.privates.callback(KeyCode.ENTER);\r\n            }\r\n            else if(game.input.lastKeyDown === KeyCode.DELETE) {\r\n                game.input.lastKeyDownp = KeyCode.EMPTY;\r\n\r\n                list = storage.erase(arrow.slot);\r\n            }\r\n            else if(arrow.slot !== 2 && game.input.lastKeyDown === KeyCode.DOWN) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                ++arrow.slot;\r\n                arrow.x = canvas.width / 2 - ctx.measureText(list[arrow.slot]).width / 2 - 60;\r\n                arrow.y += 80;\r\n            }\r\n            else if(arrow.slot !== 0 && game.input.lastKeyDown === KeyCode.UP) {\r\n                game.input.lastKeyDown = KeyCode.EMPTY;\r\n\r\n                --arrow.slot;\r\n                arrow.x = canvas.width / 2 - ctx.measureText(list[arrow.slot]).width / 2 - 60;\r\n                arrow.y -= 80;\r\n            }\r\n        },\r\n\r\n        render: function() {\r\n            ctx.fillStyle = \"#111\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            ctx.font = \"36px Arial\"\r\n            ctx.fillStyle = \"#fff\";\r\n            ctx.fillText(title, canvas.width / 2 - ctx.measureText(title).width / 2, 80);\r\n\r\n            ctx.font = \"24px Arial\"\r\n\r\n            for(var i = 0; i < list.length; ++i) {\r\n                ctx.fillText(list[i], canvas.width / 2 - ctx.measureText(list[i]).width / 2, 200 + i * 80);\r\n            }\r\n\r\n            ctx.fillText(arrow.img, arrow.x, arrow.y);\r\n        }\r\n    };\r\n})();"]}