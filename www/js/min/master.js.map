{
  "version": 3,
  "file": "master.js",
  "sources": [
    "www/js/plugins/sammy.js",
    "www/js/plugins/jquery.stellar.min.js",
    "www/js/utils.js",
    "www/js/models/about.js",
    "www/js/models/contact.js",
    "www/js/models/games.js",
    "www/js/models/home.js",
    "www/js/models/music.js",
    "www/js/models/playground.js",
    "www/js/models/portfolio.js",
    "www/js/routing.js",
    "www/js/main.js"
  ],
  "names": [],
  "mappingshmEA;AACA,4sY;ACDA;AACA,EACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ECtFA;AACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA;AACA,W;ACXA;AACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA;AACA,W;ACXA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,W;ACnBA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ECtBA;AACA,EACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,W;AClFA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,W;ACjGA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,W;ACnvIA;AACA,EACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA,EACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EACA;AACA;AACA,EACA;AACA;AACA;AACA",
  "sourcesContent": [
    "// name: sammy\r\n// version: 0.7.5\r\n\r\n// Sammy.js / http://sammyjs.org\r\n\r\n(function (factory) {\r\n    // Support module loading scenarios\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD Anonymous Module\r\n        define(['jquery'], factory);\r\n    } else {\r\n        // No module loader (plain <script> tag) - put directly in global namespace\r\n        jQuery.sammy = window.Sammy = factory(jQuery);\r\n    }\r\n})(function ($) {\r\n\r\n    var Sammy,\r\n        PATH_REPLACER = \"([^\\/]+)\",\r\n        PATH_NAME_MATCHER = /:([\\w\\d]+)/g,\r\n        QUERY_STRING_MATCHER = /\\?([^#]*)?$/,\r\n        // mainly for making `arguments` an Array\r\n        _makeArray = function (nonarray) { return Array.prototype.slice.call(nonarray); },\r\n        // borrowed from jQuery\r\n        _isFunction = function (obj) { return Object.prototype.toString.call(obj) === \"[object Function]\"; },\r\n        _isArray = function (obj) { return Object.prototype.toString.call(obj) === \"[object Array]\"; },\r\n        _isRegExp = function (obj) { return Object.prototype.toString.call(obj) === \"[object RegExp]\"; },\r\n        _decode = function (str) { return decodeURIComponent((str || '').replace(/\\+/g, ' ')); },\r\n        _encode = encodeURIComponent,\r\n        _escapeHTML = function (s) {\r\n            return String(s).replace(/&(?!\\w+;)/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\r\n        },\r\n        _routeWrapper = function (verb) {\r\n            return function () {\r\n                return this.route.apply(this, [verb].concat(Array.prototype.slice.call(arguments)));\r\n            };\r\n        },\r\n        _template_cache = {},\r\n        _has_history = !!(window.history && history.pushState),\r\n        loggers = [];\r\n\r\n\r\n    // `Sammy` (also aliased as $.sammy) is not only the namespace for a\r\n    // number of prototypes, its also a top level method that allows for easy\r\n    // creation/management of `Sammy.Application` instances. There are a\r\n    // number of different forms for `Sammy()` but each returns an instance\r\n    // of `Sammy.Application`. When a new instance is created using\r\n    // `Sammy` it is added to an Object called `Sammy.apps`. This\r\n    // provides for an easy way to get at existing Sammy applications. Only one\r\n    // instance is allowed per `element_selector` so when calling\r\n    // `Sammy('selector')` multiple times, the first time will create\r\n    // the application and the following times will extend the application\r\n    // already added to that selector.\r\n    //\r\n    // ### Example\r\n    //\r\n    //      // returns the app at #main or a new app\r\n    //      Sammy('#main')\r\n    //\r\n    //      // equivalent to \"new Sammy.Application\", except appends to apps\r\n    //      Sammy();\r\n    //      Sammy(function() { ... });\r\n    //\r\n    //      // extends the app at '#main' with function.\r\n    //      Sammy('#main', function() { ... });\r\n    //\r\n    Sammy = function () {\r\n        var args = _makeArray(arguments),\r\n            app, selector;\r\n        Sammy.apps = Sammy.apps || {};\r\n        if (args.length === 0 || args[0] && _isFunction(args[0])) { // Sammy()\r\n            return Sammy.apply(Sammy, ['body'].concat(args));\r\n        } else if (typeof (selector = args.shift()) == 'string') { // Sammy('#main')\r\n            app = Sammy.apps[selector] || new Sammy.Application();\r\n            app.element_selector = selector;\r\n            if (args.length > 0) {\r\n                $.each(args, function (i, plugin) {\r\n                    app.use(plugin);\r\n                });\r\n            }\r\n            // if the selector changes make sure the reference in Sammy.apps changes\r\n            if (app.element_selector != selector) {\r\n                delete Sammy.apps[selector];\r\n            }\r\n            Sammy.apps[app.element_selector] = app;\r\n            return app;\r\n        }\r\n    };\r\n\r\n    Sammy.VERSION = '0.7.5';\r\n\r\n    // Add to the global logger pool. Takes a function that accepts an\r\n    // unknown number of arguments and should print them or send them somewhere\r\n    // The first argument is always a timestamp.\r\n    Sammy.addLogger = function (logger) {\r\n        loggers.push(logger);\r\n    };\r\n\r\n    // Sends a log message to each logger listed in the global\r\n    // loggers pool. Can take any number of arguments.\r\n    // Also prefixes the arguments with a timestamp.\r\n    Sammy.log = function () {\r\n        var args = _makeArray(arguments);\r\n        args.unshift(\"[\" + Date() + \"]\");\r\n        $.each(loggers, function (i, logger) {\r\n            logger.apply(Sammy, args);\r\n        });\r\n    };\r\n\r\n    if (typeof window.console != 'undefined') {\r\n        if (typeof window.console.log === 'function' && _isFunction(window.console.log.apply)) {\r\n            Sammy.addLogger(function () {\r\n                window.console.log.apply(window.console, arguments);\r\n            });\r\n        } else {\r\n            Sammy.addLogger(function () {\r\n                window.console.log(arguments);\r\n            });\r\n        }\r\n    } else if (typeof console != 'undefined') {\r\n        Sammy.addLogger(function () {\r\n            console.log.apply(console, arguments);\r\n        });\r\n    }\r\n\r\n    $.extend(Sammy, {\r\n        makeArray: _makeArray,\r\n        isFunction: _isFunction,\r\n        isArray: _isArray\r\n    });\r\n\r\n    // Sammy.Object is the base for all other Sammy classes. It provides some useful\r\n    // functionality, including cloning, iterating, etc.\r\n    Sammy.Object = function (obj) { // constructor\r\n        return $.extend(this, obj || {});\r\n    };\r\n\r\n    $.extend(Sammy.Object.prototype, {\r\n\r\n        // Escape HTML in string, use in templates to prevent script injection.\r\n        // Also aliased as `h()`\r\n        escapeHTML: _escapeHTML,\r\n        h: _escapeHTML,\r\n\r\n        // Returns a copy of the object with Functions removed.\r\n        toHash: function () {\r\n            var json = {};\r\n            $.each(this, function (k, v) {\r\n                if (!_isFunction(v)) {\r\n                    json[k] = v;\r\n                }\r\n            });\r\n            return json;\r\n        },\r\n\r\n        // Renders a simple HTML version of this Objects attributes.\r\n        // Does not render functions.\r\n        // For example. Given this Sammy.Object:\r\n        //\r\n        //     var s = new Sammy.Object({first_name: 'Sammy', last_name: 'Davis Jr.'});\r\n        //     s.toHTML()\r\n        //     //=> '<strong>first_name</strong> Sammy<br /><strong>last_name</strong> Davis Jr.<br />'\r\n        //\r\n        toHTML: function () {\r\n            var display = \"\";\r\n            $.each(this, function (k, v) {\r\n                if (!_isFunction(v)) {\r\n                    display += \"<strong>\" + k + \"</strong> \" + v + \"<br />\";\r\n                }\r\n            });\r\n            return display;\r\n        },\r\n\r\n        // Returns an array of keys for this object. If `attributes_only`\r\n        // is true will not return keys that map to a `function()`\r\n        keys: function (attributes_only) {\r\n            var keys = [];\r\n            for (var property in this) {\r\n                if (!_isFunction(this[property]) || !attributes_only) {\r\n                    keys.push(property);\r\n                }\r\n            }\r\n            return keys;\r\n        },\r\n\r\n        // Checks if the object has a value at `key` and that the value is not empty\r\n        has: function (key) {\r\n            return this[key] && $.trim(this[key].toString()) !== '';\r\n        },\r\n\r\n        // convenience method to join as many arguments as you want\r\n        // by the first argument - useful for making paths\r\n        join: function () {\r\n            var args = _makeArray(arguments);\r\n            var delimiter = args.shift();\r\n            return args.join(delimiter);\r\n        },\r\n\r\n        // Shortcut to Sammy.log\r\n        log: function () {\r\n            Sammy.log.apply(Sammy, arguments);\r\n        },\r\n\r\n        // Returns a string representation of this object.\r\n        // if `include_functions` is true, it will also toString() the\r\n        // methods of this object. By default only prints the attributes.\r\n        toString: function (include_functions) {\r\n            var s = [];\r\n            $.each(this, function (k, v) {\r\n                if (!_isFunction(v) || include_functions) {\r\n                    s.push('\"' + k + '\": ' + v.toString());\r\n                }\r\n            });\r\n            return \"Sammy.Object: {\" + s.join(',') + \"}\";\r\n        }\r\n    });\r\n\r\n\r\n    // Return whether the event targets this window.\r\n    Sammy.targetIsThisWindow = function targetIsThisWindow(event, tagName) {\r\n        var targetElement = $(event.target).closest(tagName);\r\n        if (targetElement.length === 0) { return true; }\r\n\r\n        var targetWindow = targetElement.attr('target');\r\n        if (!targetWindow || targetWindow === window.name || targetWindow === '_self') { return true; }\r\n        if (targetWindow === '_blank') { return false; }\r\n        if (targetWindow === 'top' && window === window.top) { return true; }\r\n        return false;\r\n    };\r\n\r\n\r\n    // The DefaultLocationProxy is the default location proxy for all Sammy applications.\r\n    // A location proxy is a prototype that conforms to a simple interface. The purpose\r\n    // of a location proxy is to notify the Sammy.Application its bound to when the location\r\n    // or 'external state' changes.\r\n    //\r\n    // The `DefaultLocationProxy` watches for changes to the path of the current window and\r\n    // is also able to set the path based on changes in the application. It does this by\r\n    // using different methods depending on what is available in the current browser. In\r\n    // the latest and greatest browsers it used the HTML5 History API and the `pushState`\r\n    // `popState` events/methods. This allows you to use Sammy to serve a site behind normal\r\n    // URI paths as opposed to the older default of hash (#) based routing. Because the server\r\n    // can interpret the changed path on a refresh or re-entry, though, it requires additional\r\n    // support on the server side. If you'd like to force disable HTML5 history support, please\r\n    // use the `disable_push_state` setting on `Sammy.Application`. If pushState support\r\n    // is enabled, `DefaultLocationProxy` also binds to all links on the page. If a link is clicked\r\n    // that matches the current set of routes, the URL is changed using pushState instead of\r\n    // fully setting the location and the app is notified of the change.\r\n    //\r\n    // If the browser does not have support for HTML5 History, `DefaultLocationProxy` automatically\r\n    // falls back to the older hash based routing. The newest browsers (IE, Safari > 4, FF >= 3.6)\r\n    // support a 'onhashchange' DOM event, thats fired whenever the location.hash changes.\r\n    // In this situation the DefaultLocationProxy just binds to this event and delegates it to\r\n    // the application. In the case of older browsers a poller is set up to track changes to the\r\n    // hash.\r\n    Sammy.DefaultLocationProxy = function (app, run_interval_every) {\r\n        this.app = app;\r\n        // set is native to false and start the poller immediately\r\n        this.is_native = false;\r\n        this.has_history = _has_history;\r\n        this._startPolling(run_interval_every);\r\n    };\r\n\r\n    Sammy.DefaultLocationProxy.fullPath = function (location_obj) {\r\n        // Bypass the `window.location.hash` attribute.  If a question mark\r\n        // appears in the hash IE6 will strip it and all of the following\r\n        // characters from `window.location.hash`.\r\n        var matches = location_obj.toString().match(/^[^#]*(#.+)$/);\r\n        var hash = matches ? matches[1] : '';\r\n        return [location_obj.pathname, location_obj.search, hash].join('');\r\n    };\r\n    $.extend(Sammy.DefaultLocationProxy.prototype, {\r\n        // bind the proxy events to the current app.\r\n        bind: function () {\r\n            var proxy = this, app = this.app, lp = Sammy.DefaultLocationProxy;\r\n            $(window).bind('hashchange.' + this.app.eventNamespace(), function (e, non_native) {\r\n                // if we receive a native hash change event, set the proxy accordingly\r\n                // and stop polling\r\n                if (proxy.is_native === false && !non_native) {\r\n                    proxy.is_native = true;\r\n                    window.clearInterval(lp._interval);\r\n                    lp._interval = null;\r\n                }\r\n                app.trigger('location-changed');\r\n            });\r\n            if (_has_history && !app.disable_push_state) {\r\n                // bind to popstate\r\n                $(window).bind('popstate.' + this.app.eventNamespace(), function (e) {\r\n                    app.trigger('location-changed');\r\n                });\r\n                // bind to link clicks that have routes\r\n                $(document).delegate('a', 'click.history-' + this.app.eventNamespace(), function (e) {\r\n                    if (e.isDefaultPrevented() || e.metaKey || e.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    var full_path = lp.fullPath(this),\r\n                      // Get anchor's host name in a cross browser compatible way.\r\n                      // IE looses hostname property when setting href in JS\r\n                      // with a relative URL, e.g. a.setAttribute('href',\"/whatever\").\r\n                      // Circumvent this problem by creating a new link with given URL and\r\n                      // querying that for a hostname.\r\n                      hostname = this.hostname ? this.hostname : function (a) {\r\n                          var l = document.createElement(\"a\");\r\n                          l.href = a.href;\r\n                          return l.hostname;\r\n                      }(this);\r\n\r\n                    if (hostname == window.location.hostname &&\r\n                        app.lookupRoute('get', full_path) &&\r\n                        Sammy.targetIsThisWindow(e, 'a')) {\r\n                        e.preventDefault();\r\n                        proxy.setLocation(full_path);\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n            if (!lp._bindings) {\r\n                lp._bindings = 0;\r\n            }\r\n            lp._bindings++;\r\n        },\r\n\r\n        // unbind the proxy events from the current app\r\n        unbind: function () {\r\n            $(window).unbind('hashchange.' + this.app.eventNamespace());\r\n            $(window).unbind('popstate.' + this.app.eventNamespace());\r\n            $(document).undelegate('a', 'click.history-' + this.app.eventNamespace());\r\n            Sammy.DefaultLocationProxy._bindings--;\r\n            if (Sammy.DefaultLocationProxy._bindings <= 0) {\r\n                window.clearInterval(Sammy.DefaultLocationProxy._interval);\r\n                Sammy.DefaultLocationProxy._interval = null;\r\n            }\r\n        },\r\n\r\n        // get the current location from the hash.\r\n        getLocation: function () {\r\n            return Sammy.DefaultLocationProxy.fullPath(window.location);\r\n        },\r\n\r\n        // set the current location to `new_location`\r\n        setLocation: function (new_location) {\r\n            if (/^([^#\\/]|$)/.test(new_location)) { // non-prefixed url\r\n                if (_has_history && !this.app.disable_push_state) {\r\n                    new_location = '/' + new_location;\r\n                } else {\r\n                    new_location = '#!/' + new_location;\r\n                }\r\n            }\r\n            if (new_location != this.getLocation()) {\r\n                // HTML5 History exists and new_location is a full path\r\n                if (_has_history && !this.app.disable_push_state && /^\\//.test(new_location)) {\r\n                    history.pushState({ path: new_location }, window.title, new_location);\r\n                    this.app.trigger('location-changed');\r\n                } else {\r\n                    return (window.location = new_location);\r\n                }\r\n            }\r\n        },\r\n\r\n        _startPolling: function (every) {\r\n            // set up interval\r\n            var proxy = this;\r\n            if (!Sammy.DefaultLocationProxy._interval) {\r\n                if (!every) { every = 10; }\r\n                var hashCheck = function () {\r\n                    var current_location = proxy.getLocation();\r\n                    if (typeof Sammy.DefaultLocationProxy._last_location == 'undefined' ||\r\n                      current_location != Sammy.DefaultLocationProxy._last_location) {\r\n                        window.setTimeout(function () {\r\n                            $(window).trigger('hashchange', [true]);\r\n                        }, 0);\r\n                    }\r\n                    Sammy.DefaultLocationProxy._last_location = current_location;\r\n                };\r\n                hashCheck();\r\n                Sammy.DefaultLocationProxy._interval = window.setInterval(hashCheck, every);\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    // Sammy.Application is the Base prototype for defining 'applications'.\r\n    // An 'application' is a collection of 'routes' and bound events that is\r\n    // attached to an element when `run()` is called.\r\n    // The only argument an 'app_function' is evaluated within the context of the application.\r\n    Sammy.Application = function (app_function) {\r\n        var app = this;\r\n        this.routes = {};\r\n        this.listeners = new Sammy.Object({});\r\n        this.arounds = [];\r\n        this.befores = [];\r\n        // generate a unique namespace\r\n        this.namespace = (new Date()).getTime() + '-' + parseInt(Math.random() * 1000, 10);\r\n        this.context_prototype = function () { Sammy.EventContext.apply(this, arguments); };\r\n        this.context_prototype.prototype = new Sammy.EventContext();\r\n\r\n        if (_isFunction(app_function)) {\r\n            app_function.apply(this, [this]);\r\n        }\r\n        // set the location proxy if not defined to the default (DefaultLocationProxy)\r\n        if (!this._location_proxy) {\r\n            this.setLocationProxy(new Sammy.DefaultLocationProxy(this, this.run_interval_every));\r\n        }\r\n        if (this.debug) {\r\n            this.bindToAllEvents(function (e, data) {\r\n                app.log(app.toString(), e.cleaned_type, data || {});\r\n            });\r\n        }\r\n    };\r\n\r\n    Sammy.Application.prototype = $.extend({}, Sammy.Object.prototype, {\r\n\r\n        // the four route verbs\r\n        ROUTE_VERBS: ['get', 'post', 'put', 'delete'],\r\n\r\n        // An array of the default events triggered by the\r\n        // application during its lifecycle\r\n        APP_EVENTS: ['run', 'unload', 'lookup-route', 'run-route', 'route-found', 'event-context-before', 'event-context-after', 'changed', 'error', 'check-form-submission', 'redirect', 'location-changed'],\r\n\r\n        _last_route: null,\r\n        _location_proxy: null,\r\n        _running: false,\r\n\r\n        // Defines what element the application is bound to. Provide a selector\r\n        // (parseable by `jQuery()`) and this will be used by `$element()`\r\n        element_selector: 'body',\r\n\r\n        // When set to true, logs all of the default events using `log()`\r\n        debug: false,\r\n\r\n        // When set to true, and the error() handler is not overridden, will actually\r\n        // raise JS errors in routes (500) and when routes can't be found (404)\r\n        raise_errors: false,\r\n\r\n        // The time in milliseconds that the URL is queried for changes\r\n        run_interval_every: 50,\r\n\r\n        // if using the `DefaultLocationProxy` setting this to true will force the app to use\r\n        // traditional hash based routing as opposed to the new HTML5 PushState support\r\n        disable_push_state: false,\r\n\r\n        // The default template engine to use when using `partial()` in an\r\n        // `EventContext`. `template_engine` can either be a string that\r\n        // corresponds to the name of a method/helper on EventContext or it can be a function\r\n        // that takes two arguments, the content of the unrendered partial and an optional\r\n        // JS object that contains interpolation data. Template engine is only called/referred\r\n        // to if the extension of the partial is null or unknown. See `partial()`\r\n        // for more information\r\n        template_engine: null,\r\n\r\n        // //=> Sammy.Application: body\r\n        toString: function () {\r\n            return 'Sammy.Application:' + this.element_selector;\r\n        },\r\n\r\n        // returns a jQuery object of the Applications bound element.\r\n        $element: function (selector) {\r\n            return selector ? $(this.element_selector).find(selector) : $(this.element_selector);\r\n        },\r\n\r\n        // `use()` is the entry point for including Sammy plugins.\r\n        // The first argument to use should be a function() that is evaluated\r\n        // in the context of the current application, just like the `app_function`\r\n        // argument to the `Sammy.Application` constructor.\r\n        //\r\n        // Any additional arguments are passed to the app function sequentially.\r\n        //\r\n        // For much more detail about plugins, check out:\r\n        // [http://sammyjs.org/docs/plugins](http://sammyjs.org/docs/plugins)\r\n        //\r\n        // ### Example\r\n        //\r\n        //      var MyPlugin = function(app, prepend) {\r\n        //\r\n        //        this.helpers({\r\n        //          myhelper: function(text) {\r\n        //            alert(prepend + \" \" + text);\r\n        //          }\r\n        //        });\r\n        //\r\n        //      };\r\n        //\r\n        //      var app = $.sammy(function() {\r\n        //\r\n        //        this.use(MyPlugin, 'This is my plugin');\r\n        //\r\n        //        this.get('#/', function() {\r\n        //          this.myhelper('and dont you forget it!');\r\n        //          //=> Alerts: This is my plugin and dont you forget it!\r\n        //        });\r\n        //\r\n        //      });\r\n        //\r\n        // If plugin is passed as a string it assumes your are trying to load\r\n        // Sammy.\"Plugin\". This is the preferred way of loading core Sammy plugins\r\n        // as it allows for better error-messaging.\r\n        //\r\n        // ### Example\r\n        //\r\n        //      $.sammy(function() {\r\n        //        this.use('Mustache'); //=> Sammy.Mustache\r\n        //        this.use('Storage'); //=> Sammy.Storage\r\n        //      });\r\n        //\r\n        use: function () {\r\n            // flatten the arguments\r\n            var args = _makeArray(arguments),\r\n                plugin = args.shift(),\r\n                plugin_name = plugin || '';\r\n            try {\r\n                args.unshift(this);\r\n                if (typeof plugin == 'string') {\r\n                    plugin_name = 'Sammy.' + plugin;\r\n                    plugin = Sammy[plugin];\r\n                }\r\n                plugin.apply(this, args);\r\n            } catch (e) {\r\n                if (typeof plugin === 'undefined') {\r\n                    this.error(\"Plugin Error: called use() but plugin (\" + plugin_name.toString() + \") is not defined\", e);\r\n                } else if (!_isFunction(plugin)) {\r\n                    this.error(\"Plugin Error: called use() but '\" + plugin_name.toString() + \"' is not a function\", e);\r\n                } else {\r\n                    this.error(\"Plugin Error\", e);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        // Sets the location proxy for the current app. By default this is set to\r\n        // a new `Sammy.DefaultLocationProxy` on initialization. However, you can set\r\n        // the location_proxy inside you're app function to give your app a custom\r\n        // location mechanism. See `Sammy.DefaultLocationProxy` and `Sammy.DataLocationProxy`\r\n        // for examples.\r\n        //\r\n        // `setLocationProxy()` takes an initialized location proxy.\r\n        //\r\n        // ### Example\r\n        //\r\n        //        // to bind to data instead of the default hash;\r\n        //        var app = $.sammy(function() {\r\n        //          this.setLocationProxy(new Sammy.DataLocationProxy(this));\r\n        //        });\r\n        //\r\n        setLocationProxy: function (new_proxy) {\r\n            var original_proxy = this._location_proxy;\r\n            this._location_proxy = new_proxy;\r\n            if (this.isRunning()) {\r\n                if (original_proxy) {\r\n                    // if there is already a location proxy, unbind it.\r\n                    original_proxy.unbind();\r\n                }\r\n                this._location_proxy.bind();\r\n            }\r\n        },\r\n\r\n        // provide log() override for inside an app that includes the relevant application element_selector\r\n        log: function () {\r\n            Sammy.log.apply(Sammy, Array.prototype.concat.apply([this.element_selector], arguments));\r\n        },\r\n\r\n\r\n        // `route()` is the main method for defining routes within an application.\r\n        // For great detail on routes, check out:\r\n        // [http://sammyjs.org/docs/routes](http://sammyjs.org/docs/routes)\r\n        //\r\n        // This method also has aliases for each of the different verbs (eg. `get()`, `post()`, etc.)\r\n        //\r\n        // ### Arguments\r\n        //\r\n        // * `verb` A String in the set of ROUTE_VERBS or 'any'. 'any' will add routes for each\r\n        //    of the ROUTE_VERBS. If only two arguments are passed,\r\n        //    the first argument is the path, the second is the callback and the verb\r\n        //    is assumed to be 'any'.\r\n        // * `path` A Regexp or a String representing the path to match to invoke this verb.\r\n        // * `callback` A Function that is called/evaluated when the route is run see: `runRoute()`.\r\n        //    It is also possible to pass a string as the callback, which is looked up as the name\r\n        //    of a method on the application.\r\n        //\r\n        route: function (verb, path) {\r\n            var app = this, param_names = [], add_route, path_match, callback = Array.prototype.slice.call(arguments, 2);\r\n\r\n            // if the method signature is just (path, callback)\r\n            // assume the verb is 'any'\r\n            if (callback.length === 0 && _isFunction(path)) {\r\n                callback = [path];\r\n                path = verb;\r\n                verb = 'any';\r\n            }\r\n\r\n            verb = verb.toLowerCase(); // ensure verb is lower case\r\n\r\n            // if path is a string turn it into a regex\r\n            if (path.constructor == String) {\r\n\r\n                // Needs to be explicitly set because IE will maintain the index unless NULL is returned,\r\n                // which means that with two consecutive routes that contain params, the second set of params will not be found and end up in splat instead of params\r\n                // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/RegExp/lastIndex\r\n                PATH_NAME_MATCHER.lastIndex = 0;\r\n\r\n                // find the names\r\n                while ((path_match = PATH_NAME_MATCHER.exec(path)) !== null) {\r\n                    param_names.push(path_match[1]);\r\n                }\r\n                // replace with the path replacement\r\n                path = new RegExp(path.replace(PATH_NAME_MATCHER, PATH_REPLACER) + \"$\");\r\n            }\r\n            // lookup callbacks\r\n            $.each(callback, function (i, cb) {\r\n                if (typeof (cb) === 'string') {\r\n                    callback[i] = app[cb];\r\n                }\r\n            });\r\n\r\n            add_route = function (with_verb) {\r\n                var r = { verb: with_verb, path: path, callback: callback, param_names: param_names };\r\n                // add route to routes array\r\n                app.routes[with_verb] = app.routes[with_verb] || [];\r\n                // place routes in order of definition\r\n                app.routes[with_verb].push(r);\r\n            };\r\n\r\n            if (verb === 'any') {\r\n                $.each(this.ROUTE_VERBS, function (i, v) { add_route(v); });\r\n            } else {\r\n                add_route(verb);\r\n            }\r\n\r\n            // return the app\r\n            return this;\r\n        },\r\n\r\n        // Alias for route('get', ...)\r\n        get: _routeWrapper('get'),\r\n\r\n        // Alias for route('post', ...)\r\n        post: _routeWrapper('post'),\r\n\r\n        // Alias for route('put', ...)\r\n        put: _routeWrapper('put'),\r\n\r\n        // Alias for route('delete', ...)\r\n        del: _routeWrapper('delete'),\r\n\r\n        // Alias for route('any', ...)\r\n        any: _routeWrapper('any'),\r\n\r\n        // `mapRoutes` takes an array of arrays, each array being passed to route()\r\n        // as arguments, this allows for mass definition of routes. Another benefit is\r\n        // this makes it possible/easier to load routes via remote JSON.\r\n        //\r\n        // ### Example\r\n        //\r\n        //      var app = $.sammy(function() {\r\n        //\r\n        //        this.mapRoutes([\r\n        //            ['get', '#/', function() { this.log('index'); }],\r\n        //            // strings in callbacks are looked up as methods on the app\r\n        //            ['post', '#/create', 'addUser'],\r\n        //            // No verb assumes 'any' as the verb\r\n        //            [/dowhatever/, function() { this.log(this.verb, this.path)}];\r\n        //          ]);\r\n        //      });\r\n        //\r\n        mapRoutes: function (route_array) {\r\n            var app = this;\r\n            $.each(route_array, function (i, route_args) {\r\n                app.route.apply(app, route_args);\r\n            });\r\n            return this;\r\n        },\r\n\r\n        // A unique event namespace defined per application.\r\n        // All events bound with `bind()` are automatically bound within this space.\r\n        eventNamespace: function () {\r\n            return ['sammy-app', this.namespace].join('-');\r\n        },\r\n\r\n        // Works just like `jQuery.fn.bind()` with a couple notable differences.\r\n        //\r\n        // * It binds all events to the application element\r\n        // * All events are bound within the `eventNamespace()`\r\n        // * Events are not actually bound until the application is started with `run()`\r\n        // * callbacks are evaluated within the context of a Sammy.EventContext\r\n        //\r\n        bind: function (name, data, callback) {\r\n            var app = this;\r\n            // build the callback\r\n            // if the arity is 2, callback is the second argument\r\n            if (typeof callback == 'undefined') { callback = data; }\r\n            var listener_callback = function () {\r\n                // pull off the context from the arguments to the callback\r\n                var e, context, data;\r\n                e = arguments[0];\r\n                data = arguments[1];\r\n                if (data && data.context) {\r\n                    context = data.context;\r\n                    delete data.context;\r\n                } else {\r\n                    context = new app.context_prototype(app, 'bind', e.type, data, e.target);\r\n                }\r\n                e.cleaned_type = e.type.replace(app.eventNamespace(), '');\r\n                callback.apply(context, [e, data]);\r\n            };\r\n\r\n            // it could be that the app element doesnt exist yet\r\n            // so attach to the listeners array and then run()\r\n            // will actually bind the event.\r\n            if (!this.listeners[name]) { this.listeners[name] = []; }\r\n            this.listeners[name].push(listener_callback);\r\n            if (this.isRunning()) {\r\n                // if the app is running\r\n                // *actually* bind the event to the app element\r\n                this._listen(name, listener_callback);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        // Triggers custom events defined with `bind()`\r\n        //\r\n        // ### Arguments\r\n        //\r\n        // * `name` The name of the event. Automatically prefixed with the `eventNamespace()`\r\n        // * `data` An optional Object that can be passed to the bound callback.\r\n        // * `context` An optional context/Object in which to execute the bound callback.\r\n        //   If no context is supplied a the context is a new `Sammy.EventContext`\r\n        //\r\n        trigger: function (name, data) {\r\n            this.$element().trigger([name, this.eventNamespace()].join('.'), [data]);\r\n            return this;\r\n        },\r\n\r\n        // Reruns the current route\r\n        refresh: function () {\r\n            this.last_location = null;\r\n            this.trigger('location-changed');\r\n            return this;\r\n        },\r\n\r\n        // Takes a single callback that is pushed on to a stack.\r\n        // Before any route is run, the callbacks are evaluated in order within\r\n        // the current `Sammy.EventContext`\r\n        //\r\n        // If any of the callbacks explicitly return false, execution of any\r\n        // further callbacks and the route itself is halted.\r\n        //\r\n        // You can also provide a set of options that will define when to run this\r\n        // before based on the route it proceeds.\r\n        //\r\n        // ### Example\r\n        //\r\n        //      var app = $.sammy(function() {\r\n        //\r\n        //        // will run at #/route but not at #/\r\n        //        this.before('#/route', function() {\r\n        //          //...\r\n        //        });\r\n        //\r\n        //        // will run at #/ but not at #/route\r\n        //        this.before({except: {path: '#/route'}}, function() {\r\n        //          this.log('not before #/route');\r\n        //        });\r\n        //\r\n        //        this.get('#/', function() {});\r\n        //\r\n        //        this.get('#/route', function() {});\r\n        //\r\n        //      });\r\n        //\r\n        // See `contextMatchesOptions()` for a full list of supported options\r\n        //\r\n        before: function (options, callback) {\r\n            if (_isFunction(options)) {\r\n                callback = options;\r\n                options = {};\r\n            }\r\n            this.befores.push([options, callback]);\r\n            return this;\r\n        },\r\n\r\n        // A shortcut for binding a callback to be run after a route is executed.\r\n        // After callbacks have no guarunteed order.\r\n        after: function (callback) {\r\n            return this.bind('event-context-after', callback);\r\n        },\r\n\r\n\r\n        // Adds an around filter to the application. around filters are functions\r\n        // that take a single argument `callback` which is the entire route\r\n        // execution path wrapped up in a closure. This means you can decide whether\r\n        // or not to proceed with execution by not invoking `callback` or,\r\n        // more usefully wrapping callback inside the result of an asynchronous execution.\r\n        //\r\n        // ### Example\r\n        //\r\n        // The most common use case for around() is calling a _possibly_ async function\r\n        // and executing the route within the functions callback:\r\n        //\r\n        //      var app = $.sammy(function() {\r\n        //\r\n        //        var current_user = false;\r\n        //\r\n        //        function checkLoggedIn(callback) {\r\n        //          // /session returns a JSON representation of the logged in user\r\n        //          // or an empty object\r\n        //          if (!current_user) {\r\n        //            $.getJSON('/session', function(json) {\r\n        //              if (json.login) {\r\n        //                // show the user as logged in\r\n        //                current_user = json;\r\n        //                // execute the route path\r\n        //                callback();\r\n        //              } else {\r\n        //                // show the user as not logged in\r\n        //                current_user = false;\r\n        //                // the context of aroundFilters is an EventContext\r\n        //                this.redirect('#/login');\r\n        //              }\r\n        //            });\r\n        //          } else {\r\n        //            // execute the route path\r\n        //            callback();\r\n        //          }\r\n        //        };\r\n        //\r\n        //        this.around(checkLoggedIn);\r\n        //\r\n        //      });\r\n        //\r\n        around: function (callback) {\r\n            this.arounds.push(callback);\r\n            return this;\r\n        },\r\n\r\n        // Adds a onComplete function to the application. onComplete functions are executed\r\n        // at the end of a chain of route callbacks, if they call next(). Unlike after,\r\n        // which is called as soon as the route is complete, onComplete is like a final next()\r\n        // for all routes, and is thus run asynchronously\r\n        //\r\n        // ### Example\r\n        //\r\n        //      app.get('/chain',function(context,next) {\r\n        //          console.log('chain1');\r\n        //          next();\r\n        //      },function(context,next) {\r\n        //          console.log('chain2');\r\n        //          next();\r\n        //      });\r\n        //\r\n        //      app.get('/link',function(context,next) {\r\n        //          console.log('link1');\r\n        //          next();\r\n        //      },function(context,next) {\r\n        //          console.log('link2');\r\n        //          next();\r\n        //      });\r\n        //\r\n        //      app.onComplete(function() {\r\n        //          console.log(\"Running finally\");\r\n        //      });\r\n        //\r\n        // If you go to '/chain', you will get the following messages:\r\n        //\r\n        //      chain1\r\n        //      chain2\r\n        //      Running onComplete\r\n        //\r\n        //\r\n        // If you go to /link, you will get the following messages:\r\n        //\r\n        //      link1\r\n        //      link2\r\n        //      Running onComplete\r\n        //\r\n        //\r\n        // It really comes to play when doing asynchronous:\r\n        //\r\n        //      app.get('/chain',function(context,next) {\r\n        //        $.get('/my/url',function() {\r\n        //          console.log('chain1');\r\n        //          next();\r\n        //        });\r\n        //      },function(context,next) {\r\n        //        console.log('chain2');\r\n        //        next();\r\n        //      });\r\n        //\r\n        onComplete: function (callback) {\r\n            this._onComplete = callback;\r\n            return this;\r\n        },\r\n\r\n        // Returns `true` if the current application is running.\r\n        isRunning: function () {\r\n            return this._running;\r\n        },\r\n\r\n        // Helpers extends the EventContext prototype specific to this app.\r\n        // This allows you to define app specific helper functions that can be used\r\n        // whenever you're inside of an event context (templates, routes, bind).\r\n        //\r\n        // ### Example\r\n        //\r\n        //     var app = $.sammy(function() {\r\n        //\r\n        //       helpers({\r\n        //         upcase: function(text) {\r\n        //          return text.toString().toUpperCase();\r\n        //         }\r\n        //       });\r\n        //\r\n        //       get('#/', function() { with(this) {\r\n        //         // inside of this context I can use the helpers\r\n        //         $('#main').html(upcase($('#main').text());\r\n        //       }});\r\n        //\r\n        //     });\r\n        //\r\n        //\r\n        // ### Arguments\r\n        //\r\n        // * `extensions` An object collection of functions to extend the context.\r\n        //\r\n        helpers: function (extensions) {\r\n            $.extend(this.context_prototype.prototype, extensions);\r\n            return this;\r\n        },\r\n\r\n        // Helper extends the event context just like `helpers()` but does it\r\n        // a single method at a time. This is especially useful for dynamically named\r\n        // helpers\r\n        //\r\n        // ### Example\r\n        //\r\n        //     // Trivial example that adds 3 helper methods to the context dynamically\r\n        //     var app = $.sammy(function(app) {\r\n        //\r\n        //       $.each([1,2,3], function(i, num) {\r\n        //         app.helper('helper' + num, function() {\r\n        //           this.log(\"I'm helper number \" + num);\r\n        //         });\r\n        //       });\r\n        //\r\n        //       this.get('#/', function() {\r\n        //         this.helper2(); //=> I'm helper number 2\r\n        //       });\r\n        //     });\r\n        //\r\n        // ### Arguments\r\n        //\r\n        // * `name` The name of the method\r\n        // * `method` The function to be added to the prototype at `name`\r\n        //\r\n        helper: function (name, method) {\r\n            this.context_prototype.prototype[name] = method;\r\n            return this;\r\n        },\r\n\r\n        // Actually starts the application's lifecycle. `run()` should be invoked\r\n        // within a document.ready block to ensure the DOM exists before binding events, etc.\r\n        //\r\n        // ### Example\r\n        //\r\n        //     var app = $.sammy(function() { ... }); // your application\r\n        //     $(function() { // document.ready\r\n        //        app.run();\r\n        //     });\r\n        //\r\n        // ### Arguments\r\n        //\r\n        // * `start_url` Optionally, a String can be passed which the App will redirect to\r\n        //   after the events/routes have been bound.\r\n        run: function (start_url) {\r\n            if (this.isRunning()) { return false; }\r\n            var app = this;\r\n\r\n            // actually bind all the listeners\r\n            $.each(this.listeners.toHash(), function (name, callbacks) {\r\n                $.each(callbacks, function (i, listener_callback) {\r\n                    app._listen(name, listener_callback);\r\n                });\r\n            });\r\n\r\n            this.trigger('run', { start_url: start_url });\r\n            this._running = true;\r\n            // set last location\r\n            this.last_location = null;\r\n            if (!(/\\#(.+)/.test(this.getLocation())) && typeof start_url != 'undefined') {\r\n                this.setLocation(start_url);\r\n            }\r\n            // check url\r\n            this._checkLocation();\r\n            this._location_proxy.bind();\r\n            this.bind('location-changed', function () {\r\n                app._checkLocation();\r\n            });\r\n\r\n            // bind to submit to capture post/put/delete routes\r\n            this.bind('submit', function (e) {\r\n                if (!Sammy.targetIsThisWindow(e, 'form')) { return true; }\r\n                var returned = app._checkFormSubmission($(e.target).closest('form'));\r\n                return (returned === false) ? e.preventDefault() : false;\r\n            });\r\n\r\n            // bind unload to body unload\r\n            $(window).bind('unload', function () {\r\n                app.unload();\r\n            });\r\n\r\n            // trigger html changed\r\n            return this.trigger('changed');\r\n        },\r\n\r\n        // The opposite of `run()`, un-binds all event listeners and intervals\r\n        // `run()` Automatically binds a `onunload` event to run this when\r\n        // the document is closed.\r\n        unload: function () {\r\n            if (!this.isRunning()) { return false; }\r\n            var app = this;\r\n            this.trigger('unload');\r\n            // clear interval\r\n            this._location_proxy.unbind();\r\n            // unbind form submits\r\n            this.$element().unbind('submit').removeClass(app.eventNamespace());\r\n            // unbind all events\r\n            $.each(this.listeners.toHash(), function (name, listeners) {\r\n                $.each(listeners, function (i, listener_callback) {\r\n                    app._unlisten(name, listener_callback);\r\n                });\r\n            });\r\n            this._running = false;\r\n            return this;\r\n        },\r\n\r\n        // Not only runs `unbind` but also destroys the app reference.\r\n        destroy: function () {\r\n            this.unload();\r\n            delete Sammy.apps[this.element_selector];\r\n            return this;\r\n        },\r\n\r\n        // Will bind a single callback function to every event that is already\r\n        // being listened to in the app. This includes all the `APP_EVENTS`\r\n        // as well as any custom events defined with `bind()`.\r\n        //\r\n        // Used internally for debug logging.\r\n        bindToAllEvents: function (callback) {\r\n            var app = this;\r\n            // bind to the APP_EVENTS first\r\n            $.each(this.APP_EVENTS, function (i, e) {\r\n                app.bind(e, callback);\r\n            });\r\n            // next, bind to listener names (only if they dont exist in APP_EVENTS)\r\n            $.each(this.listeners.keys(true), function (i, name) {\r\n                if ($.inArray(name, app.APP_EVENTS) == -1) {\r\n                    app.bind(name, callback);\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n\r\n        // Returns a copy of the given path with any query string after the hash\r\n        // removed.\r\n        routablePath: function (path) {\r\n            return path.replace(QUERY_STRING_MATCHER, '');\r\n        },\r\n\r\n        // Given a verb and a String path, will return either a route object or false\r\n        // if a matching route can be found within the current defined set.\r\n        lookupRoute: function (verb, path) {\r\n            var app = this, routed = false, i = 0, l, route;\r\n            if (typeof this.routes[verb] != 'undefined') {\r\n                l = this.routes[verb].length;\r\n                for (; i < l; i++) {\r\n                    route = this.routes[verb][i];\r\n                    if (app.routablePath(path).match(route.path)) {\r\n                        routed = route;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return routed;\r\n        },\r\n\r\n        // First, invokes `lookupRoute()` and if a route is found, parses the\r\n        // possible URL params and then invokes the route's callback within a new\r\n        // `Sammy.EventContext`. If the route can not be found, it calls\r\n        // `notFound()`. If `raise_errors` is set to `true` and\r\n        // the `error()` has not been overridden, it will throw an actual JS\r\n        // error.\r\n        //\r\n        // You probably will never have to call this directly.\r\n        //\r\n        // ### Arguments\r\n        //\r\n        // * `verb` A String for the verb.\r\n        // * `path` A String path to lookup.\r\n        // * `params` An Object of Params pulled from the URI or passed directly.\r\n        //\r\n        // ### Returns\r\n        //\r\n        // Either returns the value returned by the route callback or raises a 404 Not Found error.\r\n        //\r\n        runRoute: function (verb, path, params, target) {\r\n            var app = this,\r\n                route = this.lookupRoute(verb, path),\r\n                context,\r\n                wrapped_route,\r\n                arounds,\r\n                around,\r\n                befores,\r\n                before,\r\n                callback_args,\r\n                path_params,\r\n                final_returned;\r\n\r\n            if (this.debug) {\r\n                this.log('runRoute', [verb, path].join(' '));\r\n            }\r\n\r\n            this.trigger('run-route', { verb: verb, path: path, params: params });\r\n            if (typeof params == 'undefined') { params = {}; }\r\n\r\n            $.extend(params, this._parseQueryString(path));\r\n\r\n            if (route) {\r\n                this.trigger('route-found', { route: route });\r\n                // pull out the params from the path\r\n                if ((path_params = route.path.exec(this.routablePath(path))) !== null) {\r\n                    // first match is the full path\r\n                    path_params.shift();\r\n                    // for each of the matches\r\n                    $.each(path_params, function (i, param) {\r\n                        // if theres a matching param name\r\n                        if (route.param_names[i]) {\r\n                            // set the name to the match\r\n                            params[route.param_names[i]] = _decode(param);\r\n                        } else {\r\n                            // initialize 'splat'\r\n                            if (!params.splat) { params.splat = []; }\r\n                            params.splat.push(_decode(param));\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // set event context\r\n                context = new this.context_prototype(this, verb, path, params, target);\r\n                // ensure arrays\r\n                arounds = this.arounds.slice(0);\r\n                befores = this.befores.slice(0);\r\n                // set the callback args to the context + contents of the splat\r\n                callback_args = [context];\r\n                if (params.splat) {\r\n                    callback_args = callback_args.concat(params.splat);\r\n                }\r\n                // wrap the route up with the before filters\r\n                wrapped_route = function () {\r\n                    var returned, i, nextRoute;\r\n                    while (befores.length > 0) {\r\n                        before = befores.shift();\r\n                        // check the options\r\n                        if (app.contextMatchesOptions(context, before[0])) {\r\n                            returned = before[1].apply(context, [context]);\r\n                            if (returned === false) { return false; }\r\n                        }\r\n                    }\r\n                    app.last_route = route;\r\n                    context.trigger('event-context-before', { context: context });\r\n                    // run multiple callbacks\r\n                    if (typeof (route.callback) === \"function\") {\r\n                        route.callback = [route.callback];\r\n                    }\r\n                    if (route.callback && route.callback.length) {\r\n                        i = -1;\r\n                        nextRoute = function () {\r\n                            i++;\r\n                            if (route.callback[i]) {\r\n                                returned = route.callback[i].apply(context, callback_args);\r\n                            } else if (app._onComplete && typeof (app._onComplete === \"function\")) {\r\n                                app._onComplete(context);\r\n                            }\r\n                        };\r\n                        callback_args.push(nextRoute);\r\n                        nextRoute();\r\n                    }\r\n                    context.trigger('event-context-after', { context: context });\r\n                    return returned;\r\n                };\r\n                $.each(arounds.reverse(), function (i, around) {\r\n                    var last_wrapped_route = wrapped_route;\r\n                    wrapped_route = function () { return around.apply(context, [last_wrapped_route]); };\r\n                });\r\n                try {\r\n                    final_returned = wrapped_route();\r\n                } catch (e) {\r\n                    this.error(['500 Error', verb, path].join(' '), e);\r\n                }\r\n                return final_returned;\r\n            } else {\r\n                return this.notFound(verb, path);\r\n            }\r\n        },\r\n\r\n        // Matches an object of options against an `EventContext` like object that\r\n        // contains `path` and `verb` attributes. Internally Sammy uses this\r\n        // for matching `before()` filters against specific options. You can set the\r\n        // object to _only_ match certain paths or verbs, or match all paths or verbs _except_\r\n        // those that match the options.\r\n        //\r\n        // ### Example\r\n        //\r\n        //     var app = $.sammy(),\r\n        //         context = {verb: 'get', path: '#/mypath'};\r\n        //\r\n        //     // match against a path string\r\n        //     app.contextMatchesOptions(context, '#/mypath'); //=> true\r\n        //     app.contextMatchesOptions(context, '#/otherpath'); //=> false\r\n        //     // equivalent to\r\n        //     app.contextMatchesOptions(context, {only: {path:'#/mypath'}}); //=> true\r\n        //     app.contextMatchesOptions(context, {only: {path:'#/otherpath'}}); //=> false\r\n        //     // match against a path regexp\r\n        //     app.contextMatchesOptions(context, /path/); //=> true\r\n        //     app.contextMatchesOptions(context, /^path/); //=> false\r\n        //     // match only a verb\r\n        //     app.contextMatchesOptions(context, {only: {verb:'get'}}); //=> true\r\n        //     app.contextMatchesOptions(context, {only: {verb:'post'}}); //=> false\r\n        //     // match all except a verb\r\n        //     app.contextMatchesOptions(context, {except: {verb:'post'}}); //=> true\r\n        //     app.contextMatchesOptions(context, {except: {verb:'get'}}); //=> false\r\n        //     // match all except a path\r\n        //     app.contextMatchesOptions(context, {except: {path:'#/otherpath'}}); //=> true\r\n        //     app.contextMatchesOptions(context, {except: {path:'#/mypath'}}); //=> false\r\n        //     // match all except a verb and a path\r\n        //     app.contextMatchesOptions(context, {except: {path:'#/otherpath', verb:'post'}}); //=> true\r\n        //     app.contextMatchesOptions(context, {except: {path:'#/mypath', verb:'post'}}); //=> true\r\n        //     app.contextMatchesOptions(context, {except: {path:'#/mypath', verb:'get'}}); //=> false\r\n        //     // match multiple paths\r\n        //     app.contextMatchesOptions(context, {path: ['#/mypath', '#/otherpath']}); //=> true\r\n        //     app.contextMatchesOptions(context, {path: ['#/otherpath', '#/thirdpath']}); //=> false\r\n        //     // equivalent to\r\n        //     app.contextMatchesOptions(context, {only: {path: ['#/mypath', '#/otherpath']}}); //=> true\r\n        //     app.contextMatchesOptions(context, {only: {path: ['#/otherpath', '#/thirdpath']}}); //=> false\r\n        //     // match all except multiple paths\r\n        //     app.contextMatchesOptions(context, {except: {path: ['#/mypath', '#/otherpath']}}); //=> false\r\n        //     app.contextMatchesOptions(context, {except: {path: ['#/otherpath', '#/thirdpath']}}); //=> true\r\n        //     // match all except multiple paths and verbs\r\n        //     app.contextMatchesOptions(context, {except: {path: ['#/mypath', '#/otherpath'], verb: ['get', 'post']}}); //=> false\r\n        //     app.contextMatchesOptions(context, {except: {path: ['#/otherpath', '#/thirdpath'], verb: ['get', 'post']}}); //=> true\r\n        //\r\n        contextMatchesOptions: function (context, match_options, positive) {\r\n            var options = match_options;\r\n            // normalize options\r\n            if (typeof options === 'string' || _isRegExp(options)) {\r\n                options = { path: options };\r\n            }\r\n            if (typeof positive === 'undefined') {\r\n                positive = true;\r\n            }\r\n            // empty options always match\r\n            if ($.isEmptyObject(options)) {\r\n                return true;\r\n            }\r\n            // Do we have to match against multiple paths?\r\n            if (_isArray(options.path)) {\r\n                var results, numopt, opts, len;\r\n                results = [];\r\n                for (numopt = 0, len = options.path.length; numopt < len; numopt += 1) {\r\n                    opts = $.extend({}, options, { path: options.path[numopt] });\r\n                    results.push(this.contextMatchesOptions(context, opts));\r\n                }\r\n                var matched = $.inArray(true, results) > -1 ? true : false;\r\n                return positive ? matched : !matched;\r\n            }\r\n            if (options.only) {\r\n                return this.contextMatchesOptions(context, options.only, true);\r\n            } else if (options.except) {\r\n                return this.contextMatchesOptions(context, options.except, false);\r\n            }\r\n            var path_matched = true, verb_matched = true;\r\n            if (options.path) {\r\n                if (!_isRegExp(options.path)) {\r\n                    options.path = new RegExp(options.path.toString() + '$');\r\n                }\r\n                path_matched = options.path.test(context.path);\r\n            }\r\n            if (options.verb) {\r\n                if (typeof options.verb === 'string') {\r\n                    verb_matched = options.verb === context.verb;\r\n                } else {\r\n                    verb_matched = options.verb.indexOf(context.verb) > -1;\r\n                }\r\n            }\r\n            return positive ? (verb_matched && path_matched) : !(verb_matched && path_matched);\r\n        },\r\n\r\n\r\n        // Delegates to the `location_proxy` to get the current location.\r\n        // See `Sammy.DefaultLocationProxy` for more info on location proxies.\r\n        getLocation: function () {\r\n            return this._location_proxy.getLocation();\r\n        },\r\n\r\n        // Delegates to the `location_proxy` to set the current location.\r\n        // See `Sammy.DefaultLocationProxy` for more info on location proxies.\r\n        //\r\n        // ### Arguments\r\n        //\r\n        // * `new_location` A new location string (e.g. '#/')\r\n        //\r\n        setLocation: function (new_location) {\r\n            return this._location_proxy.setLocation(new_location);\r\n        },\r\n\r\n        // Swaps the content of `$element()` with `content`\r\n        // You can override this method to provide an alternate swap behavior\r\n        // for `EventContext.partial()`.\r\n        //\r\n        // ### Example\r\n        //\r\n        //      var app = $.sammy(function() {\r\n        //\r\n        //        // implements a 'fade out'/'fade in'\r\n        //        this.swap = function(content, callback) {\r\n        //          var context = this;\r\n        //          context.$element().fadeOut('slow', function() {\r\n        //            context.$element().html(content);\r\n        //            context.$element().fadeIn('slow', function() {\r\n        //              if (callback) {\r\n        //                callback.apply();\r\n        //              }\r\n        //            });\r\n        //          });\r\n        //        };\r\n        //\r\n        //      });\r\n        //\r\n        swap: function (content, callback) {\r\n            var $el = this.$element().html(content);\r\n            if (_isFunction(callback)) { callback(content); }\r\n            return $el;\r\n        },\r\n\r\n        // a simple global cache for templates. Uses the same semantics as\r\n        // `Sammy.Cache` and `Sammy.Storage` so can easily be replaced with\r\n        // a persistent storage that lasts beyond the current request.\r\n        templateCache: function (key, value) {\r\n            if (typeof value != 'undefined') {\r\n                return _template_cache[key] = value;\r\n            } else {\r\n                return _template_cache[key];\r\n            }\r\n        },\r\n\r\n        // clear the templateCache\r\n        clearTemplateCache: function () {\r\n            return (_template_cache = {});\r\n        },\r\n\r\n        // This throws a '404 Not Found' error by invoking `error()`.\r\n        // Override this method or `error()` to provide custom\r\n        // 404 behavior (i.e redirecting to / or showing a warning)\r\n        notFound: function (verb, path) {\r\n            var ret = this.error(['404 Not Found', verb, path].join(' '));\r\n            return (verb === 'get') ? ret : true;\r\n        },\r\n\r\n        // The base error handler takes a string `message` and an `Error`\r\n        // object. If `raise_errors` is set to `true` on the app level,\r\n        // this will re-throw the error to the browser. Otherwise it will send the error\r\n        // to `log()`. Override this method to provide custom error handling\r\n        // e.g logging to a server side component or displaying some feedback to the\r\n        // user.\r\n        error: function (message, original_error) {\r\n            if (!original_error) { original_error = new Error(); }\r\n            original_error.message = [message, original_error.message].join(' ');\r\n            this.trigger('error', { message: original_error.message, error: original_error });\r\n            if (this.raise_errors) {\r\n                throw (original_error);\r\n            } else {\r\n                this.log(original_error.message, original_error);\r\n            }\r\n        },\r\n\r\n        _checkLocation: function () {\r\n            var location, returned;\r\n            // get current location\r\n            location = this.getLocation();\r\n            // compare to see if hash has changed\r\n            if (!this.last_location || this.last_location[0] != 'get' || this.last_location[1] != location) {\r\n                // reset last location\r\n                this.last_location = ['get', location];\r\n                // lookup route for current hash\r\n                returned = this.runRoute('get', location);\r\n            }\r\n            return returned;\r\n        },\r\n\r\n        _getFormVerb: function (form) {\r\n            var $form = $(form), verb, $_method;\r\n            $_method = $form.find('input[name=\"_method\"]');\r\n            if ($_method.length > 0) { verb = $_method.val(); }\r\n            if (!verb) { verb = $form[0].getAttribute('method'); }\r\n            if (!verb || verb === '') { verb = 'get'; }\r\n            return $.trim(verb.toString().toLowerCase());\r\n        },\r\n\r\n        _checkFormSubmission: function (form) {\r\n            var $form, path, verb, params, returned;\r\n            this.trigger('check-form-submission', { form: form });\r\n            $form = $(form);\r\n            path = $form.attr('action') || '';\r\n            verb = this._getFormVerb($form);\r\n\r\n            if (this.debug) {\r\n                this.log('_checkFormSubmission', $form, path, verb);\r\n            }\r\n\r\n            if (verb === 'get') {\r\n                params = this._serializeFormParams($form);\r\n                if (params !== '') { path += '?' + params; }\r\n                this.setLocation(path);\r\n                returned = false;\r\n            } else {\r\n                params = $.extend({}, this._parseFormParams($form));\r\n                returned = this.runRoute(verb, path, params, form.get(0));\r\n            }\r\n            return (typeof returned == 'undefined') ? false : returned;\r\n        },\r\n\r\n        _serializeFormParams: function ($form) {\r\n            var queryString = \"\",\r\n              fields = $form.serializeArray(),\r\n              i;\r\n            if (fields.length > 0) {\r\n                queryString = this._encodeFormPair(fields[0].name, fields[0].value);\r\n                for (i = 1; i < fields.length; i++) {\r\n                    queryString = queryString + \"&\" + this._encodeFormPair(fields[i].name, fields[i].value);\r\n                }\r\n            }\r\n            return queryString;\r\n        },\r\n\r\n        _encodeFormPair: function (name, value) {\r\n            return _encode(name) + \"=\" + _encode(value);\r\n        },\r\n\r\n        _parseFormParams: function ($form) {\r\n            var params = {},\r\n                form_fields = $form.serializeArray(),\r\n                i;\r\n            for (i = 0; i < form_fields.length; i++) {\r\n                params = this._parseParamPair(params, form_fields[i].name, form_fields[i].value);\r\n            }\r\n            return params;\r\n        },\r\n\r\n        _parseQueryString: function (path) {\r\n            var params = {}, parts, pairs, pair, i;\r\n\r\n            parts = path.match(QUERY_STRING_MATCHER);\r\n            if (parts && parts[1]) {\r\n                pairs = parts[1].split('&');\r\n                for (i = 0; i < pairs.length; i++) {\r\n                    pair = pairs[i].split('=');\r\n                    params = this._parseParamPair(params, _decode(pair[0]), _decode(pair[1] || \"\"));\r\n                }\r\n            }\r\n            return params;\r\n        },\r\n\r\n        _parseParamPair: function (params, key, value) {\r\n            if (typeof params[key] !== 'undefined') {\r\n                if (_isArray(params[key])) {\r\n                    params[key].push(value);\r\n                } else {\r\n                    params[key] = [params[key], value];\r\n                }\r\n            } else {\r\n                params[key] = value;\r\n            }\r\n            return params;\r\n        },\r\n\r\n        _listen: function (name, callback) {\r\n            return this.$element().bind([name, this.eventNamespace()].join('.'), callback);\r\n        },\r\n\r\n        _unlisten: function (name, callback) {\r\n            return this.$element().unbind([name, this.eventNamespace()].join('.'), callback);\r\n        }\r\n\r\n    });\r\n\r\n    // `Sammy.RenderContext` is an object that makes sequential template loading,\r\n    // rendering and interpolation seamless even when dealing with asynchronous\r\n    // operations.\r\n    //\r\n    // `RenderContext` objects are not usually created directly, rather they are\r\n    // instantiated from an `Sammy.EventContext` by using `render()`, `load()` or\r\n    // `partial()` which all return `RenderContext` objects.\r\n    //\r\n    // `RenderContext` methods always returns a modified `RenderContext`\r\n    // for chaining (like jQuery itself).\r\n    //\r\n    // The core magic is in the `then()` method which puts the callback passed as\r\n    // an argument into a queue to be executed once the previous callback is complete.\r\n    // All the methods of `RenderContext` are wrapped in `then()` which allows you\r\n    // to queue up methods by chaining, but maintaining a guaranteed execution order\r\n    // even with remote calls to fetch templates.\r\n    //\r\n    Sammy.RenderContext = function (event_context) {\r\n        this.event_context = event_context;\r\n        this.callbacks = [];\r\n        this.previous_content = null;\r\n        this.content = null;\r\n        this.next_engine = false;\r\n        this.waiting = false;\r\n    };\r\n\r\n    Sammy.RenderContext.prototype = $.extend({}, Sammy.Object.prototype, {\r\n\r\n        // The \"core\" of the `RenderContext` object, adds the `callback` to the\r\n        // queue. If the context is `waiting` (meaning an async operation is happening)\r\n        // then the callback will be executed in order, once the other operations are\r\n        // complete. If there is no currently executing operation, the `callback`\r\n        // is executed immediately.\r\n        //\r\n        // The value returned from the callback is stored in `content` for the\r\n        // subsequent operation. If you return `false`, the queue will pause, and\r\n        // the next callback in the queue will not be executed until `next()` is\r\n        // called. This allows for the guaranteed order of execution while working\r\n        // with async operations.\r\n        //\r\n        // If then() is passed a string instead of a function, the string is looked\r\n        // up as a helper method on the event context.\r\n        //\r\n        // ### Example\r\n        //\r\n        //      this.get('#/', function() {\r\n        //        // initialize the RenderContext\r\n        //        // Even though `load()` executes async, the next `then()`\r\n        //        // wont execute until the load finishes\r\n        //        this.load('myfile.txt')\r\n        //            .then(function(content) {\r\n        //              // the first argument to then is the content of the\r\n        //              // prev operation\r\n        //              $('#main').html(content);\r\n        //            });\r\n        //      });\r\n        //\r\n        then: function (callback) {\r\n            if (!_isFunction(callback)) {\r\n                // if a string is passed to then, assume we want to call\r\n                // a helper on the event context in its context\r\n                if (typeof callback === 'string' && callback in this.event_context) {\r\n                    var helper = this.event_context[callback];\r\n                    callback = function (content) {\r\n                        return helper.apply(this.event_context, [content]);\r\n                    };\r\n                } else {\r\n                    return this;\r\n                }\r\n            }\r\n            var context = this;\r\n            if (this.waiting) {\r\n                this.callbacks.push(callback);\r\n            } else {\r\n                this.wait();\r\n                window.setTimeout(function () {\r\n                    var returned = callback.apply(context, [context.content, context.previous_content]);\r\n                    if (returned !== false) {\r\n                        context.next(returned);\r\n                    }\r\n                }, 0);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        // Pause the `RenderContext` queue. Combined with `next()` allows for async\r\n        // operations.\r\n        //\r\n        // ### Example\r\n        //\r\n        //        this.get('#/', function() {\r\n        //          this.load('mytext.json')\r\n        //              .then(function(content) {\r\n        //                var context = this,\r\n        //                    data    = JSON.parse(content);\r\n        //                // pause execution\r\n        //                context.wait();\r\n        //                // post to a url\r\n        //                $.post(data.url, {}, function(response) {\r\n        //                  context.next(JSON.parse(response));\r\n        //                });\r\n        //              })\r\n        //              .then(function(data) {\r\n        //                // data is json from the previous post\r\n        //                $('#message').text(data.status);\r\n        //              });\r\n        //        });\r\n        wait: function () {\r\n            this.waiting = true;\r\n        },\r\n\r\n        // Resume the queue, setting `content` to be used in the next operation.\r\n        // See `wait()` for an example.\r\n        next: function (content) {\r\n            this.waiting = false;\r\n            if (typeof content !== 'undefined') {\r\n                this.previous_content = this.content;\r\n                this.content = content;\r\n            }\r\n            if (this.callbacks.length > 0) {\r\n                this.then(this.callbacks.shift());\r\n            }\r\n        },\r\n\r\n        // Load a template into the context.\r\n        // The `location` can either be a string specifying the remote path to the\r\n        // file, a jQuery object, or a DOM element.\r\n        //\r\n        // No interpolation happens by default, the content is stored in\r\n        // `content`.\r\n        //\r\n        // In the case of a path, unless the option `{cache: false}` is passed the\r\n        // data is stored in the app's `templateCache()`.\r\n        //\r\n        // If a jQuery or DOM object is passed the `innerHTML` of the node is pulled in.\r\n        // This is useful for nesting templates as part of the initial page load wrapped\r\n        // in invisible elements or `<script>` tags. With template paths, the template\r\n        // engine is looked up by the extension. For DOM/jQuery embedded templates,\r\n        // this isnt possible, so there are a couple of options:\r\n        //\r\n        //  * pass an `{engine:}` option.\r\n        //  * define the engine in the `data-engine` attribute of the passed node.\r\n        //  * just store the raw template data and use `interpolate()` manually\r\n        //\r\n        // If a `callback` is passed it is executed after the template load.\r\n        load: function (location, options, callback) {\r\n            var context = this;\r\n            return this.then(function () {\r\n                var should_cache, cached, is_json, location_array;\r\n                if (_isFunction(options)) {\r\n                    callback = options;\r\n                    options = {};\r\n                } else {\r\n                    options = $.extend({}, options);\r\n                }\r\n                if (callback) { this.then(callback); }\r\n                if (typeof location === 'string') {\r\n                    // it's a path\r\n                    is_json = (location.match(/\\.json(\\?|$)/) || options.json);\r\n                    should_cache = is_json ? options.cache === true : options.cache !== false;\r\n                    context.next_engine = context.event_context.engineFor(location);\r\n                    delete options.cache;\r\n                    delete options.json;\r\n                    if (options.engine) {\r\n                        context.next_engine = options.engine;\r\n                        delete options.engine;\r\n                    }\r\n                    if (should_cache && (cached = this.event_context.app.templateCache(location))) {\r\n                        return cached;\r\n                    }\r\n                    this.wait();\r\n                    $.ajax($.extend({\r\n                        url: location,\r\n                        data: {},\r\n                        dataType: is_json ? 'json' : 'text',\r\n                        type: 'get',\r\n                        success: function (data) {\r\n                            if (should_cache) {\r\n                                context.event_context.app.templateCache(location, data);\r\n                            }\r\n                            context.next(data);\r\n                        }\r\n                    }, options));\r\n                    return false;\r\n                } else {\r\n                    // it's a dom/jQuery\r\n                    if (location.nodeType) {\r\n                        return location.innerHTML;\r\n                    }\r\n                    if (location.selector) {\r\n                        // it's a jQuery\r\n                        context.next_engine = location.attr('data-engine');\r\n                        if (options.clone === false) {\r\n                            return location.remove()[0].innerHTML.toString();\r\n                        } else {\r\n                            return location[0].innerHTML.toString();\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        // Load partials\r\n        //\r\n        // ### Example\r\n        //\r\n        //      this.loadPartials({mypartial: '/path/to/partial'});\r\n        //\r\n        loadPartials: function (partials) {\r\n            var name;\r\n            if (partials) {\r\n                this.partials = this.partials || {};\r\n                for (name in partials) {\r\n                    (function (context, name) {\r\n                        context.load(partials[name])\r\n                               .then(function (template) {\r\n                                   this.partials[name] = template;\r\n                               });\r\n                    })(this, name);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        // `load()` a template and then `interpolate()` it with data.\r\n        //\r\n        // can be called with multiple different signatures:\r\n        //\r\n        //      this.render(callback);\r\n        //      this.render('/location');\r\n        //      this.render('/location', {some: data});\r\n        //      this.render('/location', callback);\r\n        //      this.render('/location', {some: data}, callback);\r\n        //      this.render('/location', {some: data}, {my: partials});\r\n        //      this.render('/location', callback, {my: partials});\r\n        //      this.render('/location', {some: data}, callback, {my: partials});\r\n        //\r\n        // ### Example\r\n        //\r\n        //      this.get('#/', function() {\r\n        //        this.render('mytemplate.template', {name: 'test'});\r\n        //      });\r\n        //\r\n        render: function (location, data, callback, partials) {\r\n            if (_isFunction(location) && !data) {\r\n                // invoked as render(callback)\r\n                return this.then(location);\r\n            } else {\r\n                if (_isFunction(data)) {\r\n                    // invoked as render(location, callback, [partials])\r\n                    partials = callback;\r\n                    callback = data;\r\n                    data = null;\r\n                } else if (callback && !_isFunction(callback)) {\r\n                    // invoked as render(location, data, partials)\r\n                    partials = callback;\r\n                    callback = null;\r\n                }\r\n\r\n                return this.loadPartials(partials)\r\n                           .load(location)\r\n                           .interpolate(data, location)\r\n                           .then(callback);\r\n            }\r\n        },\r\n\r\n        // `render()` the `location` with `data` and then `swap()` the\r\n        // app's `$element` with the rendered content.\r\n        partial: function (location, data, callback, partials) {\r\n            if (_isFunction(callback)) {\r\n                // invoked as partial(location, data, callback, [partials])\r\n                return this.render(location, data, partials).swap(callback);\r\n            } else if (_isFunction(data)) {\r\n                // invoked as partial(location, callback, [partials])\r\n                return this.render(location, {}, callback).swap(data);\r\n            } else {\r\n                // invoked as partial(location, data, [partials])\r\n                return this.render(location, data, callback).swap();\r\n            }\r\n        },\r\n\r\n        // defers the call of function to occur in order of the render queue.\r\n        // The function can accept any number of arguments as long as the last\r\n        // argument is a callback function. This is useful for putting arbitrary\r\n        // asynchronous functions into the queue. The content passed to the\r\n        // callback is passed as `content` to the next item in the queue.\r\n        //\r\n        // ### Example\r\n        //\r\n        //     this.send($.getJSON, '/app.json')\r\n        //         .then(function(json) {\r\n        //           $('#message).text(json['message']);\r\n        //          });\r\n        //\r\n        //\r\n        send: function () {\r\n            var context = this,\r\n                args = _makeArray(arguments),\r\n                fun = args.shift();\r\n\r\n            if (_isArray(args[0])) { args = args[0]; }\r\n\r\n            return this.then(function (content) {\r\n                args.push(function (response) { context.next(response); });\r\n                context.wait();\r\n                fun.apply(fun, args);\r\n                return false;\r\n            });\r\n        },\r\n\r\n        // iterates over an array, applying the callback for each item item. the\r\n        // callback takes the same style of arguments as `jQuery.each()` (index, item).\r\n        // The return value of each callback is collected as a single string and stored\r\n        // as `content` to be used in the next iteration of the `RenderContext`.\r\n        collect: function (array, callback, now) {\r\n            var context = this;\r\n            var coll = function () {\r\n                if (_isFunction(array)) {\r\n                    callback = array;\r\n                    array = this.content;\r\n                }\r\n                var contents = [], doms = false;\r\n                $.each(array, function (i, item) {\r\n                    var returned = callback.apply(context, [i, item]);\r\n                    if (returned.jquery && returned.length == 1) {\r\n                        returned = returned[0];\r\n                        doms = true;\r\n                    }\r\n                    contents.push(returned);\r\n                    return returned;\r\n                });\r\n                return doms ? contents : contents.join('');\r\n            };\r\n            return now ? coll() : this.then(coll);\r\n        },\r\n\r\n        // loads a template, and then interpolates it for each item in the `data`\r\n        // array. If a callback is passed, it will call the callback with each\r\n        // item in the array _after_ interpolation\r\n        renderEach: function (location, name, data, callback) {\r\n            if (_isArray(name)) {\r\n                callback = data;\r\n                data = name;\r\n                name = null;\r\n            }\r\n            return this.load(location).then(function (content) {\r\n                var rctx = this;\r\n                if (!data) {\r\n                    data = _isArray(this.previous_content) ? this.previous_content : [];\r\n                }\r\n                if (callback) {\r\n                    $.each(data, function (i, value) {\r\n                        var idata = {}, engine = this.next_engine || location;\r\n                        if (name) {\r\n                            idata[name] = value;\r\n                        } else {\r\n                            idata = value;\r\n                        }\r\n                        callback(value, rctx.event_context.interpolate(content, idata, engine));\r\n                    });\r\n                } else {\r\n                    return this.collect(data, function (i, value) {\r\n                        var idata = {}, engine = this.next_engine || location;\r\n                        if (name) {\r\n                            idata[name] = value;\r\n                        } else {\r\n                            idata = value;\r\n                        }\r\n                        return this.event_context.interpolate(content, idata, engine);\r\n                    }, true);\r\n                }\r\n            });\r\n        },\r\n\r\n        // uses the previous loaded `content` and the `data` object to interpolate\r\n        // a template. `engine` defines the templating/interpolation method/engine\r\n        // that should be used. If `engine` is not passed, the `next_engine` is\r\n        // used. If `retain` is `true`, the final interpolated data is appended to\r\n        // the `previous_content` instead of just replacing it.\r\n        interpolate: function (data, engine, retain) {\r\n            var context = this;\r\n            return this.then(function (content, prev) {\r\n                if (!data && prev) { data = prev; }\r\n                if (this.next_engine) {\r\n                    engine = this.next_engine;\r\n                    this.next_engine = false;\r\n                }\r\n                var rendered = context.event_context.interpolate(content, data, engine, this.partials);\r\n                return retain ? prev + rendered : rendered;\r\n            });\r\n        },\r\n\r\n        // Swap the return contents ensuring order. See `Application#swap`\r\n        swap: function (callback) {\r\n            return this.then(function (content) {\r\n                this.event_context.swap(content, callback);\r\n                return content;\r\n            }).trigger('changed', {});\r\n        },\r\n\r\n        // Same usage as `jQuery.fn.appendTo()` but uses `then()` to ensure order\r\n        appendTo: function (selector) {\r\n            return this.then(function (content) {\r\n                $(selector).append(content);\r\n            }).trigger('changed', {});\r\n        },\r\n\r\n        // Same usage as `jQuery.fn.prependTo()` but uses `then()` to ensure order\r\n        prependTo: function (selector) {\r\n            return this.then(function (content) {\r\n                $(selector).prepend(content);\r\n            }).trigger('changed', {});\r\n        },\r\n\r\n        // Replaces the `$(selector)` using `html()` with the previously loaded\r\n        // `content`\r\n        replace: function (selector) {\r\n            return this.then(function (content) {\r\n                $(selector).html(content);\r\n            }).trigger('changed', {});\r\n        },\r\n\r\n        // trigger the event in the order of the event context. Same semantics\r\n        // as `Sammy.EventContext#trigger()`. If data is omitted, `content`\r\n        // is sent as `{content: content}`\r\n        trigger: function (name, data) {\r\n            return this.then(function (content) {\r\n                if (typeof data == 'undefined') { data = { content: content }; }\r\n                this.event_context.trigger(name, data);\r\n                return content;\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n    // `Sammy.EventContext` objects are created every time a route is run or a\r\n    // bound event is triggered. The callbacks for these events are evaluated within a `Sammy.EventContext`\r\n    // This within these callbacks the special methods of `EventContext` are available.\r\n    //\r\n    // ### Example\r\n    //\r\n    //       $.sammy(function() {\r\n    //         // The context here is this Sammy.Application\r\n    //         this.get('#/:name', function() {\r\n    //           // The context here is a new Sammy.EventContext\r\n    //           if (this.params['name'] == 'sammy') {\r\n    //             this.partial('name.html.erb', {name: 'Sammy'});\r\n    //           } else {\r\n    //             this.redirect('#/somewhere-else')\r\n    //           }\r\n    //         });\r\n    //       });\r\n    //\r\n    // Initialize a new EventContext\r\n    //\r\n    // ### Arguments\r\n    //\r\n    // * `app` The `Sammy.Application` this event is called within.\r\n    // * `verb` The verb invoked to run this context/route.\r\n    // * `path` The string path invoked to run this context/route.\r\n    // * `params` An Object of optional params to pass to the context. Is converted\r\n    //   to a `Sammy.Object`.\r\n    // * `target` a DOM element that the event that holds this context originates\r\n    //   from. For post, put and del routes, this is the form element that triggered\r\n    //   the route.\r\n    //\r\n    Sammy.EventContext = function (app, verb, path, params, target) {\r\n        this.app = app;\r\n        this.verb = verb;\r\n        this.path = path;\r\n        this.params = new Sammy.Object(params);\r\n        this.target = target;\r\n    };\r\n\r\n    Sammy.EventContext.prototype = $.extend({}, Sammy.Object.prototype, {\r\n\r\n        // A shortcut to the app's `$element()`\r\n        $element: function () {\r\n            return this.app.$element(_makeArray(arguments).shift());\r\n        },\r\n\r\n        // Look up a templating engine within the current app and context.\r\n        // `engine` can be one of the following:\r\n        //\r\n        // * a function: should conform to `function(content, data) { return interpolated; }`\r\n        // * a template path: 'template.ejs', looks up the extension to match to\r\n        //   the `ejs()` helper\r\n        // * a string referring to the helper: \"mustache\" => `mustache()`\r\n        //\r\n        // If no engine is found, use the app's default `template_engine`\r\n        //\r\n        engineFor: function (engine) {\r\n            var context = this, engine_match;\r\n            // if path is actually an engine function just return it\r\n            if (_isFunction(engine)) { return engine; }\r\n            // lookup engine name by path extension\r\n            engine = (engine || context.app.template_engine).toString();\r\n            if ((engine_match = engine.match(/\\.([^\\.\\?\\#]+)(\\?|$)/))) {\r\n                engine = engine_match[1];\r\n            }\r\n            // set the engine to the default template engine if no match is found\r\n            if (engine && _isFunction(context[engine])) {\r\n                return context[engine];\r\n            }\r\n\r\n            if (context.app.template_engine) {\r\n                return this.engineFor(context.app.template_engine);\r\n            }\r\n            return function (content, data) { return content; };\r\n        },\r\n\r\n        // using the template `engine` found with `engineFor()`, interpolate the\r\n        // `data` into `content`\r\n        interpolate: function (content, data, engine, partials) {\r\n            return this.engineFor(engine).apply(this, [content, data, partials]);\r\n        },\r\n\r\n        // Create and return a `Sammy.RenderContext` calling `render()` on it.\r\n        // Loads the template and interpolate the data, however does not actual\r\n        // place it in the DOM.\r\n        //\r\n        // ### Example\r\n        //\r\n        //      // mytemplate.mustache <div class=\"name\">{{name}}</div>\r\n        //      render('mytemplate.mustache', {name: 'quirkey'});\r\n        //      // sets the `content` to <div class=\"name\">quirkey</div>\r\n        //      render('mytemplate.mustache', {name: 'quirkey'})\r\n        //        .appendTo('ul');\r\n        //      // appends the rendered content to $('ul')\r\n        //\r\n        render: function (location, data, callback, partials) {\r\n            return new Sammy.RenderContext(this).render(location, data, callback, partials);\r\n        },\r\n\r\n        // Create and return a `Sammy.RenderContext` calling `renderEach()` on it.\r\n        // Loads the template and interpolates the data for each item,\r\n        // however does not actual place it in the DOM.\r\n        //\r\n        // ### Example\r\n        //\r\n        //      // mytemplate.mustache <div class=\"name\">{{name}}</div>\r\n        //      renderEach('mytemplate.mustache', [{name: 'quirkey'}, {name: 'endor'}])\r\n        //      // sets the `content` to <div class=\"name\">quirkey</div><div class=\"name\">endor</div>\r\n        //      renderEach('mytemplate.mustache', [{name: 'quirkey'}, {name: 'endor'}]).appendTo('ul');\r\n        //      // appends the rendered content to $('ul')\r\n        //\r\n        renderEach: function (location, name, data, callback) {\r\n            return new Sammy.RenderContext(this).renderEach(location, name, data, callback);\r\n        },\r\n\r\n        // create a new `Sammy.RenderContext` calling `load()` with `location` and\r\n        // `options`. Called without interpolation or placement, this allows for\r\n        // preloading/caching the templates.\r\n        load: function (location, options, callback) {\r\n            return new Sammy.RenderContext(this).load(location, options, callback);\r\n        },\r\n\r\n        // create a new `Sammy.RenderContext` calling `loadPartials()` with `partials`.\r\n        loadPartials: function (partials) {\r\n            return new Sammy.RenderContext(this).loadPartials(partials);\r\n        },\r\n\r\n        // `render()` the `location` with `data` and then `swap()` the\r\n        // app's `$element` with the rendered content.\r\n        partial: function (location, data, callback, partials) {\r\n            return new Sammy.RenderContext(this).partial(location, data, callback, partials);\r\n        },\r\n\r\n        // create a new `Sammy.RenderContext` calling `send()` with an arbitrary\r\n        // function\r\n        send: function () {\r\n            var rctx = new Sammy.RenderContext(this);\r\n            return rctx.send.apply(rctx, arguments);\r\n        },\r\n\r\n        // Changes the location of the current window. If `to` begins with\r\n        // '#' it only changes the document's hash. If passed more than 1 argument\r\n        // redirect will join them together with forward slashes.\r\n        //\r\n        // ### Example\r\n        //\r\n        //      redirect('#/other/route');\r\n        //      // equivalent to\r\n        //      redirect('#', 'other', 'route');\r\n        //\r\n        redirect: function () {\r\n            var to, args = _makeArray(arguments),\r\n                current_location = this.app.getLocation(),\r\n                l = args.length;\r\n            if (l > 1) {\r\n                var i = 0, paths = [], pairs = [], params = {}, has_params = false;\r\n                for (; i < l; i++) {\r\n                    if (typeof args[i] == 'string') {\r\n                        paths.push(args[i]);\r\n                    } else {\r\n                        $.extend(params, args[i]);\r\n                        has_params = true;\r\n                    }\r\n                }\r\n                to = paths.join('/');\r\n                if (has_params) {\r\n                    for (var k in params) {\r\n                        pairs.push(this.app._encodeFormPair(k, params[k]));\r\n                    }\r\n                    to += '?' + pairs.join('&');\r\n                }\r\n            } else {\r\n                to = args[0];\r\n            }\r\n            this.trigger('redirect', { to: to });\r\n            this.app.last_location = [this.verb, this.path];\r\n            this.app.setLocation(to);\r\n            if (new RegExp(to).test(current_location)) {\r\n                this.app.trigger('location-changed');\r\n            }\r\n        },\r\n\r\n        // Triggers events on `app` within the current context.\r\n        trigger: function (name, data) {\r\n            if (typeof data == 'undefined') { data = {}; }\r\n            if (!data.context) { data.context = this; }\r\n            return this.app.trigger(name, data);\r\n        },\r\n\r\n        // A shortcut to app's `eventNamespace()`\r\n        eventNamespace: function () {\r\n            return this.app.eventNamespace();\r\n        },\r\n\r\n        // A shortcut to app's `swap()`\r\n        swap: function (contents, callback) {\r\n            return this.app.swap(contents, callback);\r\n        },\r\n\r\n        // Raises a possible `notFound()` error for the current path.\r\n        notFound: function () {\r\n            return this.app.notFound(this.verb, this.path);\r\n        },\r\n\r\n        // Default JSON parsing uses jQuery's `parseJSON()`. Include `Sammy.JSON`\r\n        // plugin for the more conformant \"crockford special\".\r\n        json: function (string) {\r\n            return $.parseJSON(string);\r\n        },\r\n\r\n        // //=> Sammy.EventContext: get #/ {}\r\n        toString: function () {\r\n            return \"Sammy.EventContext: \" + [this.verb, this.path, this.params].join(' ');\r\n        }\r\n\r\n    });\r\n\r\n    return Sammy;\r\n});\r\n",
    "/*! Stellar.js v0.6.2 | Copyright 2013, Mark Dalgleish | http://markdalgleish.com/projects/stellar.js | http://markdalgleish.mit-license.org */\r\n(function(e,t,n,r){function d(t,n){this.element=t,this.options=e.extend({},s,n),this._defaults=s,this._name=i,this.init()}var i=\"stellar\",s={scrollProperty:\"scroll\",positionProperty:\"position\",horizontalScrolling:!0,verticalScrolling:!0,horizontalOffset:0,verticalOffset:0,responsive:!1,parallaxBackgrounds:!0,parallaxElements:!0,hideDistantElements:!0,hideElement:function(e){e.hide()},showElement:function(e){e.show()}},o={scroll:{getLeft:function(e){return e.scrollLeft()},setLeft:function(e,t){e.scrollLeft(t)},getTop:function(e){return e.scrollTop()},setTop:function(e,t){e.scrollTop(t)}},position:{getLeft:function(e){return parseInt(e.css(\"left\"),10)*-1},getTop:function(e){return parseInt(e.css(\"top\"),10)*-1}},margin:{getLeft:function(e){return parseInt(e.css(\"margin-left\"),10)*-1},getTop:function(e){return parseInt(e.css(\"margin-top\"),10)*-1}},transform:{getLeft:function(e){var t=getComputedStyle(e[0])[f];return t!==\"none\"?parseInt(t.match(/(-?[0-9]+)/g)[4],10)*-1:0},getTop:function(e){var t=getComputedStyle(e[0])[f];return t!==\"none\"?parseInt(t.match(/(-?[0-9]+)/g)[5],10)*-1:0}}},u={position:{setLeft:function(e,t){e.css(\"left\",t)},setTop:function(e,t){e.css(\"top\",t)}},transform:{setPosition:function(e,t,n,r,i){e[0].style[f]=\"translate3d(\"+(t-n)+\"px, \"+(r-i)+\"px, 0)\"}}},a=function(){var t=/^(Moz|Webkit|Khtml|O|ms|Icab)(?=[A-Z])/,n=e(\"script\")[0].style,r=\"\",i;for(i in n)if(t.test(i)){r=i.match(t)[0];break}return\"WebkitOpacity\"in n&&(r=\"Webkit\"),\"KhtmlOpacity\"in n&&(r=\"Khtml\"),function(e){return r+(r.length>0?e.charAt(0).toUpperCase()+e.slice(1):e)}}(),f=a(\"transform\"),l=e(\"<div />\",{style:\"background:#fff\"}).css(\"background-position-x\")!==r,c=l?function(e,t,n){e.css({\"background-position-x\":t,\"background-position-y\":n})}:function(e,t,n){e.css(\"background-position\",t+\" \"+n)},h=l?function(e){return[e.css(\"background-position-x\"),e.css(\"background-position-y\")]}:function(e){return e.css(\"background-position\").split(\" \")},p=t.requestAnimationFrame||t.webkitRequestAnimationFrame||t.mozRequestAnimationFrame||t.oRequestAnimationFrame||t.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)};d.prototype={init:function(){this.options.name=i+\"_\"+Math.floor(Math.random()*1e9),this._defineElements(),this._defineGetters(),this._defineSetters(),this._handleWindowLoadAndResize(),this._detectViewport(),this.refresh({firstLoad:!0}),this.options.scrollProperty===\"scroll\"?this._handleScrollEvent():this._startAnimationLoop()},_defineElements:function(){this.element===n.body&&(this.element=t),this.$scrollElement=e(this.element),this.$element=this.element===t?e(\"body\"):this.$scrollElement,this.$viewportElement=this.options.viewportElement!==r?e(this.options.viewportElement):this.$scrollElement[0]===t||this.options.scrollProperty===\"scroll\"?this.$scrollElement:this.$scrollElement.parent()},_defineGetters:function(){var e=this,t=o[e.options.scrollProperty];this._getScrollLeft=function(){return t.getLeft(e.$scrollElement)},this._getScrollTop=function(){return t.getTop(e.$scrollElement)}},_defineSetters:function(){var t=this,n=o[t.options.scrollProperty],r=u[t.options.positionProperty],i=n.setLeft,s=n.setTop;this._setScrollLeft=typeof i==\"function\"?function(e){i(t.$scrollElement,e)}:e.noop,this._setScrollTop=typeof s==\"function\"?function(e){s(t.$scrollElement,e)}:e.noop,this._setPosition=r.setPosition||function(e,n,i,s,o){t.options.horizontalScrolling&&r.setLeft(e,n,i),t.options.verticalScrolling&&r.setTop(e,s,o)}},_handleWindowLoadAndResize:function(){var n=this,r=e(t);n.options.responsive&&r.bind(\"load.\"+this.name,function(){n.refresh()}),r.bind(\"resize.\"+this.name,function(){n._detectViewport(),n.options.responsive&&n.refresh()})},refresh:function(n){var r=this,i=r._getScrollLeft(),s=r._getScrollTop();(!n||!n.firstLoad)&&this._reset(),this._setScrollLeft(0),this._setScrollTop(0),this._setOffsets(),this._findParticles(),this._findBackgrounds(),n&&n.firstLoad&&/WebKit/.test(navigator.userAgent)&&e(t).load(function(){var e=r._getScrollLeft(),t=r._getScrollTop();r._setScrollLeft(e+1),r._setScrollTop(t+1),r._setScrollLeft(e),r._setScrollTop(t)}),this._setScrollLeft(i),this._setScrollTop(s)},_detectViewport:function(){var e=this.$viewportElement.offset(),t=e!==null&&e!==r;this.viewportWidth=this.$viewportElement.width(),this.viewportHeight=this.$viewportElement.height(),this.viewportOffsetTop=t?e.top:0,this.viewportOffsetLeft=t?e.left:0},_findParticles:function(){var t=this,n=this._getScrollLeft(),i=this._getScrollTop();if(this.particles!==r)for(var s=this.particles.length-1;s>=0;s--)this.particles[s].$element.data(\"stellar-elementIsActive\",r);this.particles=[];if(!this.options.parallaxElements)return;this.$element.find(\"[data-stellar-ratio]\").each(function(n){var i=e(this),s,o,u,a,f,l,c,h,p,d=0,v=0,m=0,g=0;if(!i.data(\"stellar-elementIsActive\"))i.data(\"stellar-elementIsActive\",this);else if(i.data(\"stellar-elementIsActive\")!==this)return;t.options.showElement(i),i.data(\"stellar-startingLeft\")?(i.css(\"left\",i.data(\"stellar-startingLeft\")),i.css(\"top\",i.data(\"stellar-startingTop\"))):(i.data(\"stellar-startingLeft\",i.css(\"left\")),i.data(\"stellar-startingTop\",i.css(\"top\"))),u=i.position().left,a=i.position().top,f=i.css(\"margin-left\")===\"auto\"?0:parseInt(i.css(\"margin-left\"),10),l=i.css(\"margin-top\")===\"auto\"?0:parseInt(i.css(\"margin-top\"),10),h=i.offset().left-f,p=i.offset().top-l,i.parents().each(function(){var t=e(this);if(t.data(\"stellar-offset-parent\")===!0)return d=m,v=g,c=t,!1;m+=t.position().left,g+=t.position().top}),s=i.data(\"stellar-horizontal-offset\")!==r?i.data(\"stellar-horizontal-offset\"):c!==r&&c.data(\"stellar-horizontal-offset\")!==r?c.data(\"stellar-horizontal-offset\"):t.horizontalOffset,o=i.data(\"stellar-vertical-offset\")!==r?i.data(\"stellar-vertical-offset\"):c!==r&&c.data(\"stellar-vertical-offset\")!==r?c.data(\"stellar-vertical-offset\"):t.verticalOffset,t.particles.push({$element:i,$offsetParent:c,isFixed:i.css(\"position\")===\"fixed\",horizontalOffset:s,verticalOffset:o,startingPositionLeft:u,startingPositionTop:a,startingOffsetLeft:h,startingOffsetTop:p,parentOffsetLeft:d,parentOffsetTop:v,stellarRatio:i.data(\"stellar-ratio\")!==r?i.data(\"stellar-ratio\"):1,width:i.outerWidth(!0),height:i.outerHeight(!0),isHidden:!1})})},_findBackgrounds:function(){var t=this,n=this._getScrollLeft(),i=this._getScrollTop(),s;this.backgrounds=[];if(!this.options.parallaxBackgrounds)return;s=this.$element.find(\"[data-stellar-background-ratio]\"),this.$element.data(\"stellar-background-ratio\")&&(s=s.add(this.$element)),s.each(function(){var s=e(this),o=h(s),u,a,f,l,p,d,v,m,g,y=0,b=0,w=0,E=0;if(!s.data(\"stellar-backgroundIsActive\"))s.data(\"stellar-backgroundIsActive\",this);else if(s.data(\"stellar-backgroundIsActive\")!==this)return;s.data(\"stellar-backgroundStartingLeft\")?c(s,s.data(\"stellar-backgroundStartingLeft\"),s.data(\"stellar-backgroundStartingTop\")):(s.data(\"stellar-backgroundStartingLeft\",o[0]),s.data(\"stellar-backgroundStartingTop\",o[1])),p=s.css(\"margin-left\")===\"auto\"?0:parseInt(s.css(\"margin-left\"),10),d=s.css(\"margin-top\")===\"auto\"?0:parseInt(s.css(\"margin-top\"),10),v=s.offset().left-p-n,m=s.offset().top-d-i,s.parents().each(function(){var t=e(this);if(t.data(\"stellar-offset-parent\")===!0)return y=w,b=E,g=t,!1;w+=t.position().left,E+=t.position().top}),u=s.data(\"stellar-horizontal-offset\")!==r?s.data(\"stellar-horizontal-offset\"):g!==r&&g.data(\"stellar-horizontal-offset\")!==r?g.data(\"stellar-horizontal-offset\"):t.horizontalOffset,a=s.data(\"stellar-vertical-offset\")!==r?s.data(\"stellar-vertical-offset\"):g!==r&&g.data(\"stellar-vertical-offset\")!==r?g.data(\"stellar-vertical-offset\"):t.verticalOffset,t.backgrounds.push({$element:s,$offsetParent:g,isFixed:s.css(\"background-attachment\")===\"fixed\",horizontalOffset:u,verticalOffset:a,startingValueLeft:o[0],startingValueTop:o[1],startingBackgroundPositionLeft:isNaN(parseInt(o[0],10))?0:parseInt(o[0],10),startingBackgroundPositionTop:isNaN(parseInt(o[1],10))?0:parseInt(o[1],10),startingPositionLeft:s.position().left,startingPositionTop:s.position().top,startingOffsetLeft:v,startingOffsetTop:m,parentOffsetLeft:y,parentOffsetTop:b,stellarRatio:s.data(\"stellar-background-ratio\")===r?1:s.data(\"stellar-background-ratio\")})})},_reset:function(){var e,t,n,r,i;for(i=this.particles.length-1;i>=0;i--)e=this.particles[i],t=e.$element.data(\"stellar-startingLeft\"),n=e.$element.data(\"stellar-startingTop\"),this._setPosition(e.$element,t,t,n,n),this.options.showElement(e.$element),e.$element.data(\"stellar-startingLeft\",null).data(\"stellar-elementIsActive\",null).data(\"stellar-backgroundIsActive\",null);for(i=this.backgrounds.length-1;i>=0;i--)r=this.backgrounds[i],r.$element.data(\"stellar-backgroundStartingLeft\",null).data(\"stellar-backgroundStartingTop\",null),c(r.$element,r.startingValueLeft,r.startingValueTop)},destroy:function(){this._reset(),this.$scrollElement.unbind(\"resize.\"+this.name).unbind(\"scroll.\"+this.name),this._animationLoop=e.noop,e(t).unbind(\"load.\"+this.name).unbind(\"resize.\"+this.name)},_setOffsets:function(){var n=this,r=e(t);r.unbind(\"resize.horizontal-\"+this.name).unbind(\"resize.vertical-\"+this.name),typeof this.options.horizontalOffset==\"function\"?(this.horizontalOffset=this.options.horizontalOffset(),r.bind(\"resize.horizontal-\"+this.name,function(){n.horizontalOffset=n.options.horizontalOffset()})):this.horizontalOffset=this.options.horizontalOffset,typeof this.options.verticalOffset==\"function\"?(this.verticalOffset=this.options.verticalOffset(),r.bind(\"resize.vertical-\"+this.name,function(){n.verticalOffset=n.options.verticalOffset()})):this.verticalOffset=this.options.verticalOffset},_repositionElements:function(){var e=this._getScrollLeft(),t=this._getScrollTop(),n,r,i,s,o,u,a,f=!0,l=!0,h,p,d,v,m;if(this.currentScrollLeft===e&&this.currentScrollTop===t&&this.currentWidth===this.viewportWidth&&this.currentHeight===this.viewportHeight)return;this.currentScrollLeft=e,this.currentScrollTop=t,this.currentWidth=this.viewportWidth,this.currentHeight=this.viewportHeight;for(m=this.particles.length-1;m>=0;m--)i=this.particles[m],s=i.isFixed?1:0,this.options.horizontalScrolling?(h=(e+i.horizontalOffset+this.viewportOffsetLeft+i.startingPositionLeft-i.startingOffsetLeft+i.parentOffsetLeft)*-(i.stellarRatio+s-1)+i.startingPositionLeft,d=h-i.startingPositionLeft+i.startingOffsetLeft):(h=i.startingPositionLeft,d=i.startingOffsetLeft),this.options.verticalScrolling?(p=(t+i.verticalOffset+this.viewportOffsetTop+i.startingPositionTop-i.startingOffsetTop+i.parentOffsetTop)*-(i.stellarRatio+s-1)+i.startingPositionTop,v=p-i.startingPositionTop+i.startingOffsetTop):(p=i.startingPositionTop,v=i.startingOffsetTop),this.options.hideDistantElements&&(l=!this.options.horizontalScrolling||d+i.width>(i.isFixed?0:e)&&d<(i.isFixed?0:e)+this.viewportWidth+this.viewportOffsetLeft,f=!this.options.verticalScrolling||v+i.height>(i.isFixed?0:t)&&v<(i.isFixed?0:t)+this.viewportHeight+this.viewportOffsetTop),l&&f?(i.isHidden&&(this.options.showElement(i.$element),i.isHidden=!1),this._setPosition(i.$element,h,i.startingPositionLeft,p,i.startingPositionTop)):i.isHidden||(this.options.hideElement(i.$element),i.isHidden=!0);for(m=this.backgrounds.length-1;m>=0;m--)o=this.backgrounds[m],s=o.isFixed?0:1,u=this.options.horizontalScrolling?(e+o.horizontalOffset-this.viewportOffsetLeft-o.startingOffsetLeft+o.parentOffsetLeft-o.startingBackgroundPositionLeft)*(s-o.stellarRatio)+\"px\":o.startingValueLeft,a=this.options.verticalScrolling?(t+o.verticalOffset-this.viewportOffsetTop-o.startingOffsetTop+o.parentOffsetTop-o.startingBackgroundPositionTop)*(s-o.stellarRatio)+\"px\":o.startingValueTop,c(o.$element,u,a)},_handleScrollEvent:function(){var e=this,t=!1,n=function(){e._repositionElements(),t=!1},r=function(){t||(p(n),t=!0)};this.$scrollElement.bind(\"scroll.\"+this.name,r),r()},_startAnimationLoop:function(){var e=this;this._animationLoop=function(){p(e._animationLoop),e._repositionElements()},this._animationLoop()}},e.fn[i]=function(t){var n=arguments;if(t===r||typeof t==\"object\")return this.each(function(){e.data(this,\"plugin_\"+i)||e.data(this,\"plugin_\"+i,new d(this,t))});if(typeof t==\"string\"&&t[0]!==\"_\"&&t!==\"init\")return this.each(function(){var r=e.data(this,\"plugin_\"+i);r instanceof d&&typeof r[t]==\"function\"&&r[t].apply(r,Array.prototype.slice.call(n,1)),t===\"destroy\"&&e.data(this,\"plugin_\"+i,null)})},e[i]=function(n){var r=e(t);return r.stellar.apply(r,Array.prototype.slice.call(arguments,0))},e[i].scrollProperty=o,e[i].positionProperty=u,t.Stellar=d})(jQuery,this,document);",
    "jw.Utils = (function ($, undefined) {\r\n\r\n    var _main = $(\".main\");\r\n\r\n    var jsSrcHash = {\r\n        // src: id\r\n        \"//ajax.googleapis.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js\": false,\r\n        \"//platform.twitter.com/widgets.js\": false,\r\n        \"/js/plugins/jquery.cycle.lite.js\": false,\r\n        \"/js/plugins/jquery.hoverIntent.min.js\": false,\r\n        \"/js/plugins/jquery.listCarousel.js\": false,\r\n        \"/js/plugins/jquery.star_bg.js\": false,\r\n        \"/js/stars.js\": false,\r\n        \"/js/ballPit.js\": false,\r\n        \"/js/bouncingObj.js\": false,\r\n        \"/js/computerGraphics/web/computergraphics.dart.js\": false,\r\n        \"/js/ustream.js\": false\r\n    };\r\n\r\n    return {\r\n        require: function (src, callback) { // callback(cached)\r\n            if (!jsSrcHash[src]) {\r\n                $.ajax({\r\n                    url: src,\r\n                    dataType: \"script\",\r\n                    success: function (data) {\r\n                        jsSrcHash[src] = true;\r\n                        callback(false);\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                callback(true);\r\n            }\r\n        },\r\n\r\n        getYear: function () {\r\n            return new Date().getFullYear();\r\n        },\r\n\r\n        resetModel: function () {\r\n            _main.empty();\r\n\r\n            for (var i = 0; i < jw.listeners.length; ++i) {\r\n                jw.listeners[i].off();\r\n            }\r\n            jw.listeners = [];\r\n\r\n\r\n            if (jw.Routing.lastPg === \"ballPit\") {\r\n                jw.BallPit.deInit();\r\n            }\r\n            else if (jw.Routing.lastPg === \"stars\") {\r\n                jw.StarryBg.deInit();\r\n            }\r\n            else if (jw.Routing.lastPg === \"bObj\") {\r\n                jw.Bounce.deInit();\r\n            }\r\n\r\n            jw.body.removeClass();\r\n            document.title = \"\";\r\n            $(\"meta[name=description], meta[name=keywords]\").remove();\r\n            $(\"meta[name=robots]\").remove();\r\n\r\n            // if page not playground inner\r\n            var h = window.location.hash;\r\n            if (typeof (h) === \"undefined\" || h.indexOf(\"#playground/\") !== 0) {  // startsWith\r\n                var pNav = $(\".dPlaygroundNav\");\r\n\r\n                if (pNav.is(\":visible\")) {\r\n                    pNav.slideUp();\r\n                }\r\n            }\r\n        }\r\n    };\r\n})(jQuery);\r\n\r\n\r\nwindow.requestAnimFrame = (function () {\r\n    return window.requestAnimationFrame ||\r\n    \t\twindow.webkitRequestAnimationFrame ||\r\n            window.mozRequestAnimationFrame ||\r\n            window.oRequestAnimationFrame ||\r\n\t\t\tfunction (callback) {\r\n\t\t\t    window.setTimeout(callback, 1000 / 60);\r\n\t\t\t};\r\n})();\r\n",
    "jw.AboutModel = (function ($, undefined) {\r\n    return {\r\n        render: function (that) {\r\n            jw.Utils.resetModel();\r\n\r\n            that.load(\"/about.html\").swap();\r\n\r\n            document.title = \"About\";\r\n            jw.body.addClass(\"about\");\r\n        }\r\n    };\r\n})(jQuery);",
    "jw.ContactModel = (function ($, undefined) {\r\n    return {\r\n        render: function (that) {\r\n            jw.Utils.resetModel();\r\n\r\n            that.load(\"/contact.html\").swap();\r\n\r\n            document.title = \"Contact Me\";\r\n            jw.body.addClass(\"contact\");\r\n        }\r\n    };\r\n})(jQuery);",
    "jw.GamesModel = (function ($, undefined) {\r\n    return {\r\n        render: function (that, page) {\r\n            jw.Utils.resetModel();\r\n\r\n            if (page === \"index\") {\r\n                that.load(\"/games/index.html\", function (data) {\r\n                    jw.Utils.require(\"/js/plugins/jquery.hoverIntent.min.js\", function () { });\r\n\r\n                    jw.Utils.require(\"/js/plugins/jquery.listCarousel.js\", function () {\r\n                        $(\"ul\").listCarousel();\r\n                    });\r\n                }).swap();\r\n\r\n                document.title = \"Games\";\r\n                jw.body.addClass(\"absHover games\");\r\n            }\r\n        }\r\n    };\r\n})(jQuery);",
    "jw.HomeModel = (function ($, undefined) {\r\n\r\n    return {\r\n        render: function (that) {\r\n            jw.Utils.resetModel();\r\n\r\n            that.load(\"/home.html\", function (data) {\r\n                jw.Utils.require(\"//platform.twitter.com/widgets.js\", function (alreadyCreated) {\r\n                    //if(!alreadyCreated){\r\n                        twttr.widgets.load();\r\n                    //}\r\n                });\r\n            }).swap();\r\n\r\n            document.title = \"Jon Wiedmann\";\r\n            jw.head.append(\"<meta name='description' content='Jon Wiedmann&#700;s personal website.  This site is set up to showcase some of my technical ability. \" +\r\n                                    \"This site has information regarding my work experience and hobbies.' />\" +\r\n                           \"<meta name='keywords' content='Jon Wiedmann, Web Developer, PHP, HTML5, CSS, jQuery, Javascript, sammy.js' />\"\r\n            );\r\n            jw.body.addClass(\"home\");\r\n        }\r\n    };\r\n})(jQuery);\r\n",
    "jw.MusicModel = (function ($, undefined) {\r\n\r\n    var year = jw.Utils.getYear();\r\n\r\n    return {\r\n        render: function (that, page) {\r\n            jw.Utils.resetModel();\r\n\r\n            if (page === \"index\") {\r\n                that.load(\"/music/index.html\", function (data) {\r\n                    $(\".teaching\").text(year - 2008);\r\n                    $(\".playing\").text(year - 1994);\r\n                }).swap();\r\n\r\n                document.title = \"Music\";\r\n                jw.body.addClass(\"music musicHome\");\r\n            }\r\n            else if (page === \"bass\") {\r\n                that.load(\"/music/bass.html\", function (data) {\r\n                    $(\".playing\").text(year - 2009);\r\n                }).swap();\r\n\r\n                document.title = \"Bass | Music\";\r\n                jw.body.addClass(\"music bass\");\r\n            }\r\n            else if (page === \"chiptunes\") {\r\n                that.load(\"/music/chiptunes.html\", function (data) {}).swap();\r\n\r\n                document.title = \"Chiptunes | Music\";\r\n                jw.body.addClass(\"music\");\r\n            }\r\n            else if (page === \"guitar\") {\r\n                that.load(\"/music/guitar.html\", function (data) {\r\n                    $(\".playing\").text(year - 2002);\r\n                }).swap();\r\n\r\n                document.title = \"Guitar | Music\";\r\n                jw.body.addClass(\"music\");\r\n            }\r\n            else if (page === \"mandolin\") {\r\n                that.load(\"/music/mandolin.html\", function (data) {\r\n                    $(\".playing\").text(year - 2008);\r\n                }).swap();\r\n\r\n                document.title = \"Mandolin | Music\";\r\n                jw.body.addClass(\"music mandolin\");\r\n            }\r\n            else if (page === \"piano\") {\r\n                that.load(\"/music/piano.html\", function (data) {\r\n                    $(\".playing\").text(year - 1994);\r\n                }).swap();\r\n\r\n                document.title = \"Piano | Music\";\r\n                jw.body.addClass(\"music\");\r\n            }\r\n            else if (page === \"trumpet\") {\r\n                that.load(\"/music/trumpet.html\", function (data) {\r\n                    $(\".playing\").text(year - 1998);\r\n                }).swap();\r\n\r\n                document.title = \"Trumpet | Music\";\r\n                jw.body.addClass(\"music trumpet\");\r\n            }\r\n            else if (page === \"rates\") {\r\n                that.load(\"/music/rates.html\", function (data) {}).swap();\r\n\r\n                document.title = \"Rates | Music\";\r\n                jw.head.append(\"<meta name='description' content='Music Lesson Rates'>\" +\r\n                               \"<meta name='robots' rel='none' />\"\r\n                );\r\n                jw.body.addClass(\"music rates\");\r\n            }\r\n            else if (page === \"voice\") {\r\n                that.load(\"/music/voice.html\", function (data) {\r\n                    $(\".playing\").text(year - 2009);\r\n                }).swap();\r\n\r\n                document.title = \"Voice | Music\";\r\n                jw.body.addClass(\"music\");\r\n            }\r\n        }\r\n    };\r\n})(jQuery);",
    "jw.PlaygroundModel = (function ($, undefined) {\r\n\r\n    return {\r\n        render: function (that, page) {\r\n            jw.Utils.resetModel();\r\n\r\n            if (page === \"index\") {\r\n                that.load(\"/playground/index.html\", function (data) {\r\n                    var clickListener = $(\".main .colL ul\").listCarousel();\r\n                    jw.listeners.push(clickListener);\r\n                }).swap();\r\n\r\n                document.title = \"Playground\";\r\n                jw.head.append(\"<meta name='description' content='A canvas example showcasing a ball pit.' />\" +\r\n                               \"<meta name='keywords' content='canvas, html5' />\"\r\n                );\r\n                jw.body.addClass(\"absHover playground\");\r\n            }\r\n            else if (page === \"ballPit\") {\r\n                that.load(\"/playground/ballPit.html\", function (data) {\r\n                    jw.Utils.require(\"/js/ballPit.js\", function () {\r\n                        jw.BallPit.init();\r\n                    });\r\n                }).swap();\r\n\r\n                document.title = \"Ball Pit | Playground\";\r\n                jw.head.append(\"<meta name='description' content='A canvas example showcasing a ball pit.' />\" +\r\n                               \"<meta name='keywords' content='canvas, html5' />\"\r\n                );\r\n                jw.body.addClass(\"playground playInner nav3\");\r\n            }\r\n            else if (page === \"stars\") {\r\n                that.load(\"/playground/stars.html\", function (data) {\r\n                    // TODO: load these async\r\n                    jw.Utils.require(\"/js/plugins/jquery.star_bg.js\", function () {\r\n                        jw.Utils.require(\"/js/stars.js\", function (cached) {\r\n                            jw.StarryBg.init();\r\n                        });\r\n                    });\r\n                }).swap();\r\n\r\n                document.title = \"Starry Background | Playground\";\r\n                jw.head.append(\"<meta name='description' content='A canvas example showcasing a starry background.' />\" +\r\n                               \"<meta name='keywords' content='canvas, html5' />\"\r\n                );\r\n                jw.body.addClass(\"playground playInner nav2\");\r\n            }\r\n            else if (page === \"bObj\") {\r\n                that.load(\"/playground/bouncing-object.html\", function (data) {\r\n                    jw.Utils.require(\"/js/bouncingObj.js\", function () {\r\n                        jw.Bounce.init();\r\n                    });\r\n                }).swap();\r\n\r\n                document.title = \"Bouncing Object | Playground\";\r\n                jw.head.append(\"<meta name='description' content='A canvas example showcasing a bouncing object.' />\" +\r\n                               \"<meta name='keywords' content='canvas, html5' />\"\r\n                );\r\n                jw.body.addClass(\"playground playInner nav5\");\r\n            }\r\n            else if (page === \"ustream\") {\r\n                that.load(\"/playground/USTREAM-demo.html\", function (data) {\r\n                    jw.Utils.require(\"/js/ustream.js\", function () {\r\n                        jw.Ustream.init();\r\n                    });\r\n                }).swap();\r\n\r\n                document.title = \"USTREAM demo | Playground\";\r\n                jw.head.append(\"<meta name='description' content='A USTREAM api demo.' />\" +\r\n                               \"<meta name='keywords' content='USTREAM' />\"\r\n                );\r\n                jw.body.addClass(\"playground playInner uStreamPage nav5\");\r\n            }\r\n            else if (page === \"bCube\") {\r\n                that.load(\"/playground/breakdancing-cube.html\", function (data) {\r\n                    $(\"#cube\").on(\"click\", function (e) {\r\n                        e.preventDefault();\r\n                    });\r\n                }).swap();\r\n\r\n                document.title = \"Breakdancing Cube | Playground\";\r\n                jw.head.append(\"<meta name='description' content='Pure CSS3 animation demo.' />\" +\r\n                               \"<meta name='keywords' content='CSS3, HTML5' />\"\r\n                );\r\n                jw.body.addClass(\"playground playInner bDancingCube nav1\");\r\n            }\r\n\r\n\r\n            if (page !== \"index\") {\r\n                var pNav = $(\".dPlaygroundNav\");\r\n\r\n                if (!pNav.is(\":visible\")) {\r\n                    pNav.slideDown();\r\n                }\r\n            }\r\n        }\r\n    };\r\n})(jQuery);",
    "jw.PortfolioModel = (function ($, undefined) {\r\n    return {\r\n        render: function (that, page) {\r\n            jw.Utils.resetModel();\r\n\r\n            if (page === \"index\") {\r\n                that.load(\"/portfolio/index.html\", function (data) {\r\n                    jw.Utils.require(\"/js/plugins/jquery.hoverIntent.min.js\", function () { });\r\n\r\n                    jw.Utils.require(\"/js/plugins/jquery.listCarousel.js\", function () {\r\n                        $(\"ul\").listCarousel();\r\n                    });\r\n                }).swap();\r\n\r\n                document.title = \"Portfolio\";\r\n                jw.body.addClass(\"portfolio absHover\");\r\n            }\r\n        }\r\n    };\r\n})(jQuery);",
    "jw.Routing = (function ($, undefined) {\r\n    var app = $.sammy(\".main\", function () {\r\n        //----- Home\r\n        this.route(\"get\",'/', function () {\r\n            jw.HomeModel.render(this);\r\n            jw.Routing.lastPg = \"home\";\r\n        });\r\n\r\n        this.route(\"get\", \"#home\", function () {\r\n            jw.HomeModel.render(this);\r\n            jw.Routing.lastPg = \"home\";\r\n        });\r\n\r\n        //----- About\r\n        this.route(\"get\", \"#about\", function () {\r\n            jw.AboutModel.render(this);\r\n            jw.Routing.lastPg = \"about\";\r\n        });\r\n\r\n        //----- Contact\r\n        this.route(\"get\", \"#contact\", function () {\r\n            jw.ContactModel.render(this);\r\n            jw.Routing.lastPg = \"contact\";\r\n        });\r\n\r\n        //----- Favorites\r\n        this.route(\"get\", \"#favorites\", function () {\r\n            jw.FavoritesModel.render(this);\r\n            jw.Routing.lastPg = \"favorites\";\r\n        });\r\n\r\n        //----- Blog\r\n        this.route(\"get\", \"#blog\", function () {\r\n            jw.BlogModel.render(this);\r\n            jw.Routing.lastPg = \"blog\";\r\n        });\r\n\r\n        //----- Games\r\n        this.route(\"get\", \"#games\", function () {\r\n            jw.GamesModel.render(this, \"index\");\r\n            jw.Routing.lastPg = \"games/index\";\r\n        });\r\n\r\n        //----- Music\r\n        this.route(\"get\", \"#music\", function () {\r\n            jw.MusicModel.render(this, \"index\");\r\n            jw.Routing.lastPg = \"music/index\";\r\n        });\r\n\r\n        this.route(\"get\", \"#music/bass\", function () {\r\n            jw.MusicModel.render(this, \"bass\");\r\n            jw.Routing.lastPg = \"music/bass\";\r\n        });\r\n\r\n        this.route(\"get\", \"#music/chiptunes\", function () {\r\n            jw.MusicModel.render(this, \"chiptunes\");\r\n            jw.Routing.lastPg = \"music/chiptunes\";\r\n        });\r\n\r\n        this.route(\"get\", \"#music/guitar\", function () {\r\n            jw.MusicModel.render(this, \"guitar\");\r\n            jw.Routing.lastPg = \"music/guitar\";\r\n        });\r\n\r\n        this.route(\"get\", \"#music/mandolin\", function () {\r\n            jw.MusicModel.render(this, \"mandolin\");\r\n            jw.Routing.lastPg = \"music/mandolin\";\r\n        });\r\n\r\n        this.route(\"get\", \"#music/piano\", function () {\r\n            jw.MusicModel.render(this, \"piano\");\r\n            jw.Routing.lastPg = \"music/piano\";\r\n        });\r\n\r\n        this.route(\"get\", \"#music/trumpet\", function () {\r\n            jw.MusicModel.render(this, \"trumpet\");\r\n            jw.Routing.lastPg = \"music/trumpet\";\r\n        });\r\n\r\n        this.route(\"get\", \"#music/rates\", function () {\r\n            jw.MusicModel.render(this, \"rates\");\r\n            jw.Routing.lastPg = \"music/rates\";\r\n        });\r\n\r\n        this.route(\"get\", \"#music/voice\", function () {\r\n            jw.MusicModel.render(this, \"voice\");\r\n            jw.Routing.lastPg = \"music/voice\";\r\n        });\r\n        \r\n        //----- Playground\r\n        this.route(\"get\", \"#playground\", function () {\r\n            jw.PlaygroundModel.render(this, \"index\");\r\n            jw.Routing.lastPg = \"playground/index\";\r\n        });\r\n\r\n        this.route(\"get\", \"#playground/ballPit\", function () {\r\n            jw.PlaygroundModel.render(this, \"ballPit\");\r\n            jw.Routing.lastPg = \"ballPit\";\r\n        });\r\n\r\n        this.route(\"get\", \"#playground/breakdancing-cube\", function () {\r\n            jw.PlaygroundModel.render(this, \"bCube\");\r\n            jw.Routing.lastPg = \"bCube\";\r\n        });\r\n\r\n        this.route(\"get\", \"#playground/bouncing-object\", function () {\r\n            jw.PlaygroundModel.render(this, \"bObj\");\r\n            jw.Routing.lastPg = \"bObj\";\r\n        });\r\n\r\n        this.route(\"get\", \"#playground/starry-background\", function () {\r\n            jw.PlaygroundModel.render(this, \"stars\");\r\n            jw.Routing.lastPg = \"stars\";\r\n        });\r\n\r\n        this.route(\"get\", \"#playground/USTREAM-demo\", function () {\r\n            jw.PlaygroundModel.render(this, \"ustream\");\r\n            jw.Routing.lastPg = \"ustream\";\r\n        });\r\n\r\n        //----- Portfolio\r\n        this.route(\"get\", \"#portfolio\", function () {\r\n            jw.PortfolioModel.render(this, \"index\");\r\n            jw.Routing.lastPg = \"portfolio/index\";\r\n        });\r\n    });\r\n\r\n    return {\r\n        lastPg: null,\r\n\r\n\r\n        init: function () {\r\n            app.run();\r\n        }\r\n    };\r\n})(jQuery);\r\n",
    "jw.Main = (function () {\r\n\r\n    function declareGlobals() {\r\n        jw.head = $(\"head\");\r\n        jw.body = $(\"body\");\r\n        jw.listeners = [];\r\n    }\r\n\r\n\r\n    return {\r\n        init: function () {\r\n            declareGlobals();\r\n\r\n            jw.Routing.init();\r\n\r\n            $(\".dateYear\").text(jw.Utils.getYear());\r\n\r\n            $(window).on(\"resize\", function () {\r\n                var h = $(\".colR > div:visible\").height();\r\n                jw.Main.fixColRHeight(h);\r\n            });\r\n\r\n            $(\"header a\").on(\"click\", function () {\r\n                $(\".main\").height(\"auto\");\r\n            });\r\n        },\r\n\r\n        fixColRHeight: function (h) {\r\n            var height = h + 120;\r\n\r\n            if($(window).width() <= 800){\r\n                height = 0;\r\n                //jw.parallax.off();\r\n            }\r\n            else {\r\n                if ($(window).width() <= 1265) {\r\n                    height += $(\".colL\").height() + 38; // colR margin-top + height\r\n                }\r\n\r\n\r\n                //jw.parallax.off();\r\n                //jw.parallax = $(window).stellar({\r\n                //    responsive: true\r\n                //});\r\n            }\r\n\r\n            if(height == 0) {\r\n                $(\".main\").height(\"auto\");\r\n            }\r\n            else {\r\n                $(\".main\").height(height);\r\n            }\r\n        }\r\n    }\r\n})();\r\n\r\n$(function () {\r\n    jw.Main.init();\r\n\r\n    jw.parallax = $(window).stellar({\r\n        responsive: true\r\n    });\r\n});\r\n"
  ]
}